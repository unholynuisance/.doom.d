* Keybindings
** Doom leader keys:
#+begin_src emacs-lisp
(setq doom-leader-alt-key "C-SPC")
(setq doom-localleader-alt-key "C-SPC l")
#+end_src

** Rebind set-mark-command
#+begin_src emacs-lisp
(map! "S-SPC" 'set-mark-command)
#+end_src

** Projectile prefix
#+begin_src emacs-lisp
(map! :leader
      "p" 'projectile-command-map)
#+end_src

* UI
** Transparency
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha . (95 . 95)))
#+end_src

** Font
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Hack" :size 16))
#+end_src

** Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-palenight)
#+end_src

** Dashboard
Menu sections:
#+begin_src emacs-lisp
(setq +doom-dashboard-menu-sections
      '(("Reload last session"
         :icon (all-the-icons-octicon "history" :face 'doom-dashboard-menu-title)
         :when (cond ((featurep! :ui workspaces)
                      (file-exists-p (expand-file-name persp-auto-save-fname persp-save-dir)))
                     ((require 'desktop nil t)
                      (file-exists-p (desktop-full-file-name))))
         :face (:inherit (doom-dashboard-menu-title bold))
         :action doom/quickload-session)
        ("Open org-agenda"
         :icon (all-the-icons-octicon "calendar" :face 'doom-dashboard-menu-title)
         :when (fboundp 'org-agenda)
         :action org-agenda)
        ("Recently opened files"
         :icon (all-the-icons-octicon "file-text" :face 'doom-dashboard-menu-title)
         :action recentf-open-files)
        ("Open project"
         :icon (all-the-icons-octicon "briefcase" :face 'doom-dashboard-menu-title)
         :action projectile-switch-project)
        ("Jump to bookmark"
         :icon (all-the-icons-octicon "bookmark" :face 'doom-dashboard-menu-title)
         :action bookmark-jump)
        ("Open private configuration"
         :icon (all-the-icons-octicon "tools" :face 'doom-dashboard-menu-title)
         :when (file-directory-p doom-private-dir)
         :action doom/open-private-config)))
#+end_src

Banner:
#+begin_src emacs-lisp
(setq fancy-splash-image (concat (file-name-as-directory doom-private-dir) "pictures/kurisu.png"))
#+end_src

** Doom quit
#+begin_src emacs-lisp
(setq +doom-quit-messages '("It's not like I'll miss you or anything, b-baka!"))
#+end_src

* Lang
** Org
#+begin_src emacs-lisp
(after! org
  (setq! org-directory "~/Org/agenda")
  (setq! org-roam-directory "~/Org/roam")
  (setq! org-agenda-files '("~/Org/agenda"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))

(use-package! org-tempo
  :after org)
#+end_src

* Email
** mu4e
#+begin_src emacs-lisp
(after! mu4e
  (setq! ; sendmail setup
         sendmail-program (executable-find "msmtp")
         send-mail-function #'smtpmail-send-it
         message-sendmail-f-is-evil t
         message-sendmail-extra-arguments '("--read-envelope-from")
         message-send-mail-function #'message-send-mail-with-sendmail
         ; getmail setup
         +mu4e-backend 'mbsync
         mu4e-get-mail-command "mbsync -a -c ~/.config/mbsync/config"
         ; misc
         mu4e-compose-signature-auto-include t
         mu4e-alert-style 'notifications
         mu4e-update-interval (* 5 60)
         mu4e-context-policy 'ask-if-none
         mu4e-compose-context-policy 'always-ask))
#+end_src

*** Personal Accounts
#+begin_src emacs-lisp
(let ((email "mtataryn555@gmail.com"))
  (set-email-account! "p mtataryn555@gmail.com"
                      `((user-full-name     . "Mykola Tataryn")
                        (user-mail-address  . "mtataryn555@gmail.com")
                        (mu4e-sent-folder   . "/mtataryn555@gmail.com/Sent")
                        (mu4e-drafts-folder . "/mtataryn555@gmail.com/Drafts")
                        (mu4e-trash-folder  . "/mtataryn555@gmail.com/Trash")
                        (mu4e-refile-folder . "/mtataryn555@gmail.com/Archive")

                        (mu4e-maildir-shortcuts . ((:maildir "/mtataryn555@gmail.com/Inbox"   :key ?i)
                                                   (:maildir "/mtataryn555@gmail.com/Sent"    :key ?s)
                                                   (:maildir "/mtataryn555@gmail.com/Drafts"  :key ?d)
                                                   (:maildir "/mtataryn555@gmail.com/Trash"   :key ?t)
                                                   (:maildir "/mtataryn555@gmail.com/Archive" :key ?a)))

                        (mu4e-bookmarks . ((:name "[mtataryn555@gmail] Unread messages"
                                            :query "flag:unread AND NOT flag:trashed AND maildir:/mtataryn555@gmail.com/*"
                                            :key ?u)
                                           (:name "[mtataryn555@gmail] Today's messages"
                                            :query "date:today..now AND NOT flag:trashed AND maildir:/mtataryn555@gmail.com/*"
                                            :key ?t)
                                           (:name "[mtataryn555@gmail] Last 7 days"
                                            :query "date:7d..now AND NOT flag:trashed AND maildir:/mtataryn555@gmail.com/*"
                                            :key ?w :hide-unread t)
                                           (:name "[mtataryn555@gmail] Flagged messages"
                                            :query "flag:flagged AND maildir:/mtataryn555@gmail.com/*"
                                            :key ?f)
                                           (:name "Unread messages"
                                            :query "flag:unread AND NOT flag:trashed"
                                            :key ?U)
                                           (:name "Today's messages"
                                            :query "date:today..now AND NOT flag:trashed"
                                            :key ?T)
                                           (:name "Last 7 days"
                                            :query "date:7d..now AND NOT flag:trashed"
                                            :key ?W :hide-unread t)
                                           (:name "Flagged messages"
                                            :query "flag:flagged"
                                            :key ?F)))

                        (smtpmail-smtp-user       . "mtataryn555@gmail.com")
                        (+mu4e-personal-addresses . ("mtataryn555@gmail.com"))

                        (mu4e-compose-signature   . ,(concat "-----\n"
                                                             "Mykola Tataryn"))

                        (org-msg-signature        . ,(concat "-----\n"
                                                             "#+begin_signature\n"
                                                             "Mykola Tataryn\n"
                                                             "#+end_signature")))
                      t))
#+end_src

*** Work Accounts
#+begin_src emacs-lisp
(set-email-account! "a mykola.tataryn@apriorit.com"
                    `((user-full-name     . "Mykola Tataryn")
                      (user-mail-address  . "mykola.tataryn@apriorit.com")
                      (mu4e-sent-folder   . "/mykola.tataryn@apriorit.com/Sent")
                      (mu4e-drafts-folder . "/mykola.tataryn@apriorit.com/Drafts")
                      (mu4e-trash-folder  . "/mykola.tataryn@apriorit.com/Trash")
                      (mu4e-refile-folder . "/mykola.tataryn@apriorit.com/Archive")

                      (mu4e-maildir-shortcuts . ((:maildir "/mykola.tataryn@apriorit.com/Inbox"   :key ?i)
                                                 (:maildir "/mykola.tataryn@apriorit.com/Sent"    :key ?s)
                                                 (:maildir "/mykola.tataryn@apriorit.com/Drafts"  :key ?d)
                                                 (:maildir "/mykola.tataryn@apriorit.com/Trash"   :key ?t)
                                                 (:maildir "/mykola.tataryn@apriorit.com/Archive" :key ?a)))

                      (mu4e-bookmarks . ((:name "[mykola.tataryn@apriorit.com] Unread messages"
                                          :query "flag:unread AND NOT flag:trashed AND maildir:/mykola.tataryn@apriorit.com/*"
                                          :key ?u)
                                         (:name "[mykola.tataryn@apriorit.com] Today's messages"
                                          :query "date:today..now AND NOT flag:trashed AND maildir:/mykola.tataryn@apriorit.com/*"
                                          :key ?t)
                                         (:name "[mykola.tataryn@apriorit.com] Last 7 days"
                                          :query "date:7d..now AND NOT flag:trashed AND maildir:/mykola.tataryn@apriorit.com/*"
                                          :key ?w :hide-unread t)
                                         (:name "[mykola.tataryn@apriorit.com] Flagged messages"
                                          :query "flag:flagged AND maildir:/mykola.tataryn@apriorit.com/*"
                                          :key ?f)
                                         (:name "[mykola.tataryn@apriorit.com] Varjo"
                                          :query "contact:varjo@apriorit.com OR subject:[varjo] AND maildir:/mykola.tataryn@apriorit.com/*"
                                          :key ?v)
                                         (:name "[mykola.tataryn@apriorit.com] Sotero"
                                          :query "contact:sotero@apriorit.com OR subject:[sotero] AND maildir:/mykola.tataryn@apriorit.com/*"
                                          :key ?s)
                                         (:name "[mykola.tataryn@apriorit.com] Jira"
                                          :query "subject:[jira] AND maildir:/mykola.tataryn@apriorit.com/*"
                                          :key ?j)
                                         (:name "[mykola.tataryn@apriorit.com] Confluence"
                                          :query "subject:[confluence] AND maildir:/mykola.tataryn@apriorit.com/*"
                                          :key ?c)
                                         (:name "Unread messages"
                                          :query "flag:unread AND NOT flag:trashed"
                                          :key ?U)
                                         (:name "Today's messages"
                                          :query "date:today..now AND NOT flag:trashed"
                                          :key ?T)
                                         (:name "Last 7 days"
                                          :query "date:7d..now AND NOT flag:trashed"
                                          :key ?W :hide-unread t)
                                         (:name "Flagged messages"
                                          :query "flag:flagged"
                                          :key ?F)))

                      (smtpmail-smtp-user       . "mykola.tataryn@apriorit.com")
                      (+mu4e-personal-addresses . ("mykola.tataryn@apriorit.com"))

                      (mu4e-compose-signature   . ,(concat "Best regards,\n"
                                                           "Mykola Tataryn,\n"
                                                           "Software Developer of Apriorit - A Priority Choice!\n"
                                                           "Visit us at http://www.apriorit.com"))

                      (org-msg-signature        . ,(concat "-----\n"
                                                           "#+begin_signature\n"
                                                           "Best regards,\n"
                                                           "Mykola Tataryn,\n"
                                                           "Software Developer of Apriorit - A Priority Choice!\n"
                                                           "Visit us at [[https://apriorit.com]]\n"
                                                           "#+end_signature")))
                    t)
#+end_src

* Other
** Reverse im
#+begin_src emacs-lisp
(use-package! reverse-im
  :hook
  (after-init . reverse-im-mode)
  :custom
  (reverse-im-input-methods '("russian-computer" "ukrainian-computer")))
#+end_src

** Good scroll
#+begin_src emacs-lisp
(use-package! good-scroll
  :hook
  (after-init . good-scroll-mode))
#+end_src
