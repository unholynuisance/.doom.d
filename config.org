#+property: header-args:emacs-lisp+ :tangle yes :eval yes
#+property: header-args :tangle no :results silent :eval no-export :mkdirp yes

* Early config
This is a section for things that other stuff depends on, so they should be loaded early.

** Enable lexical binding
We want lexical binding, right?

#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
#+end_src

** File manipulation
I'd like to have a some file manipulation utilities from [[https://github.com/rejeep/f.el][f.el]].
#+begin_src emacs-lisp :tangle packages.el
(package! f)
#+end_src

#+begin_src emacs-lisp
(use-package f)
#+end_src

** Current system
Let's define a straightforward way to check for system we are on (subject to change).
#+name: current-system
#+begin_src emacs-lisp :tangle init.el :eval :session
(defun satan/file-contents (filename)
  "Return the contents of FILENAME."
  (with-temp-buffer
    (insert-file-contents filename)
    (buffer-string)))

(defun satan/current-system-type ()
  (cond (IS-LINUX   "Linux")
        (IS-WINDOWS "Windows")
        (IS-MAC     "Mac")
        (IS-BSD     "BSD")
        (t          "Unknown")))

(defun satan/current-system ()
  "Return string containing current system capitalized name, or `\"Unknown\"'"
  (capitalize
   (downcase
    (pcase (satan/current-system-type)
          ("Linux"
           (save-match-data
             (let ((contents (satan/file-contents "/etc/os-release")))
               (string-match "^ID=\\(\\\w*\\)" contents)
               (match-string 1 contents))))
          (type type)))))

(defun satan/current-system-p (&rest args)
  "Return non-nil if `satan/current-system' is in ARGS"
  (or (member (satan/current-system) args)
      (member (satan/current-system-type) args)))
#+end_src

As [[current-system]] is not evaluated during tangle, we need to somehow enforce evaluation.
#+begin_src emacs-lisp :tangle (make-temp-file "") :noweb yes
<<current-system()>>
#+end_src

** Current display server
We may want to know which display server we are running, so it would be nice to have a utility similar to [[current-system]].
#+name: current-display-server
#+begin_src emacs-lisp :tangle init.el :eval :session
(defun satan/current-display-server ()
  "Return string containing current display server capitalized name, or `\"Unknown\"'"
  (capitalize
    (string-trim
     (or
      (shell-command-to-string
       "loginctl show-session $(awk '/tty/ {print $1}' <(loginctl)) -p Type | awk -F= '{print $2}'")
      (if (eq system-type 'windows-nt) "DWM")
      "Unknown"))))

(defun satan/current-display-server-p (&rest args)
  "Return non-nil if `satan/current-display-server' is in ARGS"
  (member (satan/current-display-server) args))
#+end_src

Same as with [[current-system]], [[current-display-server]] has to be evaluated.
#+begin_src emacs-lisp :tangle (make-temp-file "") :noweb yes
<<current-display-server()>>
#+end_src

* Installation
** Packaging
*** Pacman
#+begin_src conf :tangle pkg/pacman/PKGBUILD :noweb yes
# Maintainer: son-of-satan <mtataryn555@gmail.com>
pkgname=satanic-emacs-packages
pkgver=1
pkgrel=1
pkgdesc="Packages needed by my emacs setup"
arch=('any')
license=('WTFPL')
depends=(
    <<pacman-packages>>
)
#+end_src

** Doom dependencies
**** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
emacs ripgrep fd python cmake
#+end_src

**** Aptitude packages
#+begin_src fundamental :noweb-ref apt-packages
emacs ripgrep fd-find python3 cmake
#+end_src

**** Chocolatey packages
#+begin_src fundamental :noweb-ref chocolatey-packages
emacs ripgrep fd python3 cmake
#+end_src

** Install script
*** Arch
#+begin_src sh :shebang #!/bin/bash :tangle (if (satan/current-system-p "Arch") "bin/install.sh" "no")
cd ~/.config/doom/pkg/pacman
paru -Ui
#+end_src

*** Ubuntu
Because we are using noweb here, the syntax highlighting will break in this code block. So we need to split the script.
#+begin_src sh :shebang #!/bin/bash :tangle (if (satan/current-system-p "Ubuntu") "bin/install.sh" "no") :noweb yes
APT_PACKAGES=(
    <<apt-packages>>
)
#+end_src

And the other half of a script.
#+begin_src sh :shebang #!/bin/bash :tangle (if (satan/current-system-p "Ubuntu") "bin/install.sh" "no")
sudo apt update
sudo apt install "${APT_PACKAGES[@]}"

# HACK fd is fdfind on Ubuntu to avoid confusion with fdclone (really?)
[[ -f /usr/bin/fd ]] || sudo ln -s /usr/bin/fdfind /usr/bin/fd
#+end_src

*** Windows
I'm making two assumptions here:
+ Git bash is installed (as you would need git to clone the repository).
+ =Chocolatey= has been installed (otherwise it would be a nightmare to install dependencies).

Similar to [[Ubuntu]] section, we need to split the script to get proper syntax highlighting.
#+begin_src sh :shebang #!/bin/bash :tangle (if (satan/current-system-p "Windows") "bin/install.sh" "no") :noweb yes
CHOCOLATEY_PACKAGES=(
    <<chocolatey-packages>>
)
#+end_src

#+begin_src sh :shebang #!/bin/bash :tangle (if (satan/current-system-p "Windows") "bin/install.sh" "no")
choco install -y --force "${CHOCOLATEY_PACKAGES}"
#+end_src

** Init script
This script tangles this file, clones [[https://github.com/doomemacs/doomemacs][Doom Emacs]] and then runs setup scripts.
#+begin_src sh :shebang #!/bin/bash :tangle bin/init.sh :noweb yes
emacs --batch --eval "
(progn
  (require 'org)
  (setq org-confirm-babel-evaluate nil)
  (org-babel-tangle-file \"~/.config/doom/config.org\"))
"

~/.config/doom/bin/install.sh

git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.config/emacs

~/.config/emacs/bin/doom -y install
~/.config/doom/bin/setup.sh
#+end_src

** Setup script
#+begin_src sh :shebang #!/bin/bash :tangle bin/setup.sh

#+end_src

* General configuration
** Keybindings
*** Doom leader keys:
#+begin_src emacs-lisp
(setq doom-leader-alt-key "C-SPC")
(setq doom-localleader-alt-key "C-SPC l")
#+end_src

*** Rebind set-mark-command
#+begin_src emacs-lisp
(map! :leader :desc "Mark" "C-SPC"#'set-mark-command)
#+end_src

** UI
*** Transparency
I prefer my Emacs windows to be slightly transparent. So let's set a default alpha for new frames.
#+begin_src emacs-lisp
(defvar satan/default-transparency '(98 . 90))
(add-to-list 'default-frame-alist
             `(alpha . ,satan/default-transparency))
#+end_src

While we are at it, let's add some convenience functions to set current frame transparency.
#+begin_src emacs-lisp
(defun satan/set-transparency (active &optional inactive)
  (interactive "p")
  (set-frame-parameter (selected-frame) 'alpha
                       (cons active (or inactive (cdr (frame-parameter (selected-frame) 'alpha))))))
#+end_src

We can go further and define the following minor mode.
#+begin_src emacs-lisp
(defvar satan/transparent-mode-transparency '(60 . 40))

(define-minor-mode satan/transparent-mode
  nil
  :global t
  (if satan/transparent-mode
      (apply #'satan/set-transparency (flatten-tree satan/transparent-mode-transparency))
    (apply #'satan/set-transparency (flatten-tree satan/default-transparency))))
#+end_src

Also, let's set a sensible keybind for this mode.
#+begin_src emacs-lisp
(map! :leader
      (:prefix "t"
       :desc "Transparent mode" "t" #'satan/transparent-mode))
#+end_src

*** Fonts
#+begin_src emacs-lisp
(pcase (satan/current-system)
  ("Arch"
   (setq! doom-font
          (font-spec :family "Fira Code" :size 16)
          doom-big-font
          (font-spec :family "Fira Code" :size 24)
          doom-variable-pitch-font
          (font-spec :family "Julia Mono")
          doom-unicode-font
          (font-spec :family "Julia Mono")))
  ("Ubuntu"
   (setq! doom-font
          (font-spec :family "Fira Code" :size 16)
          doom-big-font
          (font-spec :family "Fira Code" :size 24))))
#+end_src

**** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
ttf-fira-code ttf-juliamono
#+end_src

**** Aptitude packages
#+begin_src funtamental :noweb-ref apt-packages
fonts-firacode fonts-noto
#+end_src

*** Line numbers
It's convenient when you can see distance between current line and the line you want to jump to, isn't it?
#+begin_src emacs-lisp
(setq! display-line-numbers-type 'visual)
#+end_src

*** Theme
#+begin_src emacs-lisp
(setq! doom-theme 'doom-vibrant)
#+end_src

*** Dashboard
Menu sections:
#+begin_src emacs-lisp
(setq +doom-dashboard-menu-sections
      '(("Reload last session"
         :icon (all-the-icons-octicon "history" :face 'doom-dashboard-menu-title)
         :when (cond ((featurep! :ui workspaces)
                      (file-exists-p (expand-file-name persp-auto-save-fname persp-save-dir)))
                     ((require 'desktop nil t)
                      (file-exists-p (desktop-full-file-name))))
         :face (:inherit (doom-dashboard-menu-title bold))
         :action doom/quickload-session)
        ("Open org-agenda"
         :icon (all-the-icons-octicon "calendar" :face 'doom-dashboard-menu-title)
         :when (fboundp 'org-agenda)
         :action org-agenda)
        ("Recently opened files"
         :icon (all-the-icons-octicon "file-text" :face 'doom-dashboard-menu-title)
         :action recentf-open-files)
        ("Open project"
         :icon (all-the-icons-octicon "briefcase" :face 'doom-dashboard-menu-title)
         :action projectile-switch-project)
        ("Jump to bookmark"
         :icon (all-the-icons-octicon "bookmark" :face 'doom-dashboard-menu-title)
         :action bookmark-jump)
        ("Open private configuration"
         :icon (all-the-icons-octicon "tools" :face 'doom-dashboard-menu-title)
         :when (file-directory-p doom-private-dir)
         :action doom/open-private-config)))
#+end_src

Banner:
#+begin_src emacs-lisp
(setq fancy-splash-image (concat (file-name-as-directory doom-private-dir) "pictures/kurisu.png"))
#+end_src

*** Doom quit
#+begin_src emacs-lisp
(setq +doom-quit-messages '("It's not like I'll miss you or anything, b-baka!"))
#+end_src

*** Time
I often run Emacs in fullscreen, and thus I can't see my system clock. We can fix that by displaying time on the modeline.
#+begin_src emacs-lisp
(setq! display-time-format "%H:%M")
(setq! display-time-default-load-average nil)

(add-hook! doom-init-ui #'display-time-mode)
#+end_src

** Other
*** New frames
I have (or had) two problems with new frames:
+ Sometimes, if you resize frame, close it, and open new frame, that new frame is the size of previous one, and, for example, the dashboard might not fit in.
+ New frames are not centered.

Fortunately, we can fix the first problem by modifying ~default-frame-alist~.
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(width . 80))
(add-to-list 'default-frame-alist '(height . 35))
#+end_src

To fix the second problem, we can use the following function (taken from [[https://christiantietze.de/posts/2022/04/emacs-center-window-current-monitor-simplified/][here]]) that centers the frame.
#+begin_src emacs-lisp
(defun satan/center-frame (&optional frame)
  "Center FRAME on the screen.
FRAME can be a frame name, a terminal name, or a frame.
If FRAME is omitted or nil, use currently selected frame."
  (interactive)
  (unless (eq 'maximised (frame-parameter nil 'fullscreen))
    (modify-frame-parameters
     frame '((user-position . t) (top . 0.5) (left . 0.5)))))
#+end_src

And add it to one of ~doom-init-ui~ or ~server-after-make-frame~ hooks.
#+begin_src emacs-lisp
(if (daemonp)
  (add-hook! server-after-make-frame
             #'satan/center-frame)
  (add-hook! doom-init-ui
             #'satan/center-frame))
#+end_src

*** Preferred encoding
Just in case.
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
#+end_src

*** Daemon mode
**** Systemd service
Default Systemd service that comes with Emacs from version =2.6= has ~Restart~ set to ~on-failure~, and i would like it to be ~always~.
#+begin_src conf :tangle (if (executable-find "systemctl") "~/.config/systemd/user/emacs.service" "no")
[Unit]
Description=Emacs text editor
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=notify
ExecStart=/usr/bin/emacs --fg-daemon
SuccessExitStatus=15
Restart=always

[Install]
WantedBy=default.target
#+end_src

**** .desktop
We may need a =.desktop= file for =emacsclient=.
#+begin_src conf :tangle (if (satan/current-system-p "Linux") "~/.local/share/applications/emacs.desktop" "no")
[Desktop Entry]
Name=Emacs
GenericName=Text Editor
Comment=Edit text
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacsclient -create-frame %F
Icon=emacs
Type=Application
Terminal=false
Categories=Development;TextEditor;Utility;
StartupNotify=true
StartupWMClass=Emacs
Keywords=Text;Editor;
Actions=new-window;no-daemon;

[Desktop Action new-window]
Name=New Window
Exec=emacsclient --create-frame %F

[Desktop Action no-daemon]
Name=No Daemon
Exec=emacs %F
#+end_src

**** Other
For some reason when I open new emacsclient frame it comes up garbled in some way. We can fix it by reloading theme after making new frame.
#+begin_src emacs-lisp
(when (daemonp)
  (add-hook! 'server-after-make-frame-hook
             #'doom/reload-theme))
#+end_src

Also, I prefer =main= workspace when opening a new frame.
#+begin_src emacs-lisp
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src

*** TODO Alerts
There are some packages in this config using [[https://github.com/jwiegley/alert][alert.el]], so it would be nice to set it up depending on platform we are on.
#+begin_src emacs-lisp
(setq! alert-default-style 'notifications)
#+end_src

* Packages
** Doom packages
#+begin_src emacs-lisp :tangle init.el :noweb yes
(doom!
 <<doom-packages>>
 )
#+end_src

*** Input
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:input
;;chinese
;;japanese
;;layout            ; auie,ctsrnm is the superior home row
#+end_src

*** Completion
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:completion
company           ; the ultimate code completion backend
;;helm              ; the *other* search engine for love and life
;;ido               ; the other *other* search engine...
;;(ivy            ; a search engine for love and life
;; +icons)
(vertico          ; the search engine of the future
 +icons)
#+end_src

*** UI
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:ui
;;deft              ; notational velocity for Emacs
doom              ; what makes DOOM look the way it does
doom-dashboard    ; a nifty splash screen for Emacs
doom-quit         ; DOOM quit-message prompts when you quit Emacs
(emoji +unicode)  ; 🙂
hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;;hydra
;;indent-guides     ; highlighted indent columns
(:if (>= (string-to-number emacs-version) 28)
 ligatures        ; ligatures and symbols to make your code pretty again
 +extra
 +fira)
;;minimap           ; show a map of the code on the side
modeline          ; snazzy, Atom-inspired modeline, plus API
;;nav-flash         ; blink cursor line after big motions
;;neotree           ; a project drawer, like NERDTree for vim
ophints           ; highlight the region an operation acts on
(popup +defaults)   ; tame sudden yet inevitable temporary windows
;;tabs              ; a tab bar for Emacs
;;treemacs          ; a project drawer, like neotree but cooler
;;unicode           ; extended unicode support for various languages
vc-gutter         ; vcs diff in the fringe
vi-tilde-fringe   ; fringe tildes to mark beyond EOB
(window-select    ; visually switch windows
 +numbers)
workspaces        ; tab emulation, persistence & separate workspaces
zen               ; distraction-free coding or writing
#+end_src

*** Editor
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:editor
;; (evil          ; come to the dark side, we have cookies
;;  +everywhere)
file-templates    ; auto-snippets for empty files
fold              ; (nigh) universal code folding
(format           ; automated prettiness
 +onsave)
;;god               ; run Emacs commands without modifier keys
;;lispy             ; vim for lisp, for people who don't like vim
multiple-cursors  ; editing in many places at once
;;objed             ; text object editing for the innocent
;;parinfer          ; turn lisp into python, sort of
rotate-text       ; cycle region at point between text candidates
snippets          ; my elves. They type so I don't have to
word-wrap         ; soft wrapping with language-aware indent
#+end_src

*** Emacs
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:emacs
(dired          ; making dired pretty [functional]
 +icons)
electric          ; smarter, keyword-based electric-indent
(ibuffer        ; interactive buffer management
 +icons)
undo              ; persistent, smarter undo for your inevitable mistakes
vc                ; version-control and Emacs, sitting in a tree
#+end_src

*** Term
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:term
;;eshell            ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
vterm             ; the best terminal emulation in Emacs
#+end_src

**** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
libtool
#+end_src

**** Aptitude packages
#+begin_src fundamental :noweb-ref apt-packages
libtool-bin
#+end_src

*** Checkers
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:checkers
syntax                 ; tasing you for every semicolon you forget
;; grammar             ; tasing every grammar mistake you make
#+end_src


**** Spelling
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
(:if (executable-find "aspell")
 (spell                 ; tasing you for misspelling mispelling
 +flyspell
 +aspell
 +everywhere))
#+end_src

**** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
aspell-en aspell-uk
#+end_src

**** Aptitude packages
#+begin_src fundamental :noweb-ref apt-packages
aspell-en aspell-uk
#+end_src

*** Tools
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:tools
;;ansible
biblio            ; Writes a PhD for you (citation needed)
debugger          ; FIXME stepping through code, to help you add bugs
;;direnv
docker
editorconfig      ; let someone else argue about tabs vs spaces
;;ein               ; tame Jupyter notebooks with emacs
(eval             ; run code, run (also, repls)
 +overlay)
;;gist              ; interacting with github gists
lookup              ; navigate your code and its documentation
lsp               ; M-x vscode
magit             ; a git porcelain for Emacs
make              ; run make tasks from Emacs
;;pass              ; password manager for nerds
pdf               ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
rgb               ; creating color strings
taskrunner        ; taskrunner for all your projects
;;terraform         ; infrastructure as code
;;tmux              ; an API for interacting with tmux
;;upload            ; map local to remote projects via ssh/ftp
#+end_src

**** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
editorconfig-core-c
#+end_src

**** Aptitude packages
#+begin_src fundamental :noweb-ref apt-packages
editorconfig
#+end_src

*** OS
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:os
(:if IS-MAC       ; improve compatibility with macOS
 macos)
tty               ; improve the terminal Emacs experience
#+end_src

*** Lang
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:lang
;;agda              ; types of types of types of types...
;;beancount         ; mind the GAAP
(cc                 ; C > C++ == 1
 +lsp)
;;clojure           ; java with a lisp
;;common-lisp       ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
data              ; config/data formats
;;(dart             ; paint ui and not much else
;; +flutter)
;;dhall
;;elixir            ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp        ; drown in parentheses
;;erlang            ; an elegant language for a more civilized age
;;ess               ; emacs speaks statistics
;;factor
;;faust             ; dsp, but you get to keep your soul
;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
;;(go               ; the hipster dialect
;; +lsp)
;;(haskell          ; a language that's lazier than I am
;; +lsp)
;;hy                ; readability of scheme w/ speed of python
;;idris             ; a language you can depend on
json              ; At least it ain't XML
(java +lsp)       ; the poster child for carpal tunnel syndrome
;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
;;julia             ; a better, faster MATLAB
;;kotlin            ; a better, slicker Java(Script)
(latex            ; writing papers in Emacs has never been so fun
 +latexmk
 +cdlatex
 +lsp
 +fold)
;;lean              ; for folks with too much to prove
;;ledger            ; be audit you can be
;;lua               ; one-based indices? one-based indices
markdown          ; writing docs for people to ignore
;;nim               ; python + lisp at the speed of c
;;nix               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org +roam2
     +pretty
     +pandoc
     +present
     +dragndrop)  ; organize your plain life in plain text
;;php               ; perl's insecure younger brother
;;plantuml          ; diagrams for confusing people more
;;purescript        ; javascript, but functional
(python           ; beautiful is better than ugly
 +lsp
 +pyenv)
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
;;(ruby             ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
;; +rails)
;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala             ; java, but good
;;(scheme           ; a fully conniving family of lisps
;; +guile)
sh                ; she sells {ba,z,fi}sh shells on the C xor
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
;;web               ; the tubes
;;yaml              ; JSON, but readable
;;zig               ; C, but simpler
#+end_src

**** Pacman packages
#+begin_src fundamental :noweb yes :noweb-ref pacman-packages
clang glslang
jdk-openjdk
pandoc
gnome-screenshot graphviz
<<pacman-packages-wl-clipboard()>>
python-black python-pyflakes python-isort python-pipenv python-nose python-pytest pyenv
shellcheck
#+end_src

#+name: pacman-packages-wl-clipboard
#+begin_src emacs-lisp :tangle no
(if (satan/current-display-server-p "Wayland") "wl-clipboard" "")
#+end_src

**** Aptitude packages
#+begin_src fundamental :noweb yes :noweb-ref apt-packages
clang-format glslang-tools
default-jdk
pandoc
gnome-screenshot graphviz
<<apt-packages-wl-clipboard()>>
shellcheck
#+end_src

#+name: apt-packages-wl-clipboard
#+begin_src emacs-lisp :tangle no
(if (satan/current-display-server-p "Wayland") "wl-clipboard" "")
#+end_src

*** Email
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:email
(:if (executable-find "mu")
 (mu4e
  +org
  +gmail))
;;notmuch
;;(wanderlust
;; +gmail)
#+end_src

**** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
mu isync msmtp
#+end_src

**** Aptitude packages
#+begin_src fundamental :noweb-ref apt-packages
mu4e isync msmtp
#+end_src

*** App
#+begin_src emacs-lisp :tangle no :noweb yes :noweb-ref doom-packages
:app
calendar
;;emms
;;irc                   ; how neckbeards socialize
;;(rss                  ; emacs as an RSS reader
;; +org)
;;twitter               ; twitter client https://twitter.com/vnought
#+end_src

**** Emacs everywhere
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
(:if (satan/current-system-p "Linux")
 everywhere)          ; *leave* Emacs!? You must be joking
#+end_src

***** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
xorg-xwininfo xorg-xprop xdotool xclip
#+end_src

***** Aptitude packages
#+begin_src fundamental :noweb-ref apt-packages
x11-utils xdotool xclip
#+end_src

*** Config
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:config
literate
(default +bindings +smartparens)
#+end_src

** Convenience
*** Reverse-im
#+begin_src emacs-lisp
(use-package! reverse-im
  :hook
  (after-init . reverse-im-mode)
  :custom
  (reverse-im-input-methods '("russian-computer" "ukrainian-computer")))
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! reverse-im)
#+end_src

** Tools
*** Projectile
Keybindings.
#+begin_src emacs-lisp :tangle no
(map! :leader
      (:prefix-map ("p" . "project")
       :desc "Browse project"               "." #'+default/browse-project
       :desc "Browse other project"         ">" #'doom/browse-in-other-project
       :desc "Run cmd in project root"      "!" #'projectile-run-shell-command-in-root
       :desc "Async cmd in project root"    "&" #'projectile-run-async-shell-command-in-root
       :desc "Add new project"              "a" #'projectile-add-known-project
       :desc "Switch to project buffer"     "b" #'projectile-switch-to-buffer
       :desc "Compile in project"           "c" #'projectile-compile-project
       :desc "Repeat last command"          "C" #'projectile-repeat-last-command
       :desc "Remove known project"         "d" #'projectile-remove-known-project
       :desc "Discover projects in folder"  "D" #'+default/discover-projects
       :desc "Edit project .dir-locals"     "e" #'projectile-edit-dir-locals
       :desc "Find file in project"         "f" #'projectile-find-file
       :desc "Find file in other project"   "F" #'doom/find-file-in-other-project
       :desc "Configure project"            "g" #'projectile-configure-project
       :desc "Invalidate project cache"     "i" #'projectile-invalidate-cache
       :desc "Kill project buffers"         "k" #'projectile-kill-buffers
       :desc "Find other file"              "o" #'projectile-find-other-file
       :desc "Switch project"               "p" #'projectile-switch-project
       :desc "Find recent project files"    "r" #'projectile-recentf
       :desc "Run project"                  "R" #'projectile-run-project
       :desc "Save project files"           "s" #'projectile-save-project-buffers
       :desc "List project todos"           "t" #'magit-todos-list
       :desc "Test project"                 "T" #'projectile-test-project
       :desc "Pop up scratch buffer"        "x" #'doom/open-project-scratch-buffer
       :desc "Switch to scratch buffer"     "X" #'doom/switch-to-project-scratch-buffer
       (:when (and (featurep! :tools taskrunner)
                   (or (featurep! :completion ivy)
                       (featurep! :completion helm)))
        :desc "List project tasks"          "z" #'+taskrunner/project-tasks)))
#+end_src

Configuration.
#+begin_src emacs-lisp
(after! projectile
  (setq! projectile-find-dir-includes-top-level t)
  (setq! projectile-project-search-path '("~/Projects")))
#+end_src

*** Collaborative programming
**** Floobits
I have found this pair programming service (proprietary, unfortunately) and they have an emacs plugin. Neat! Let's make it work.

First, package setup and configuration.
#+begin_src emacs-lisp :tangle packages.el
(package! floobits)
#+end_src

#+begin_src emacs-lisp
(use-package! floobits
  :defer t)

(map! :leader
      (:prefix-map ("C-c" . "collaboration")
       :desc "Join workspace"        "j" #'floobits-join-workspace
       :desc "Leave workspace"       "l" #'floobits-leave-workspace
       :desc "Summon"                "s" #'floobits-summon
       :desc "Follow user"           "f" #'floobits-follow-user
       :desc "Follow toggle"         "F" #'floobits-follow-mode-toggle
       :desc "Clear highlights"      "h" #'floobits-clear-highlights
       :desc "Add to workspace"      "a" #'floobits-add-to-workspace
       :desc "Remove from workspace" "r" #'floobits-remove-from-workspace
       (:prefix-map ("w" . "workspace")
        :desc "Share private"        "s" #'floobits-share-dir-private
        :desc "Share public"         "S" #'floobits-share-dir-public
        :desc "Configure"            "c" #'floobits-workspace-settings
        :desc "Delete"               "k" #'floobits-delete-workspace)
       :desc "Browse"                "b" #'floobits-open-workspace-in-browser))
#+end_src

We also need a =.floorc.json= with credentials in our home dir.
#+begin_src json :tangle ~/.floorc.json
{
  "auth": {
    "floobits.com": {
      "username": "son-of-satan",
      "api_key": "user_6q950st0qn",
      "secret": "pfengudkiveq5yvsjbet3g7xr"
    }
  }
}
#+end_src

*** Checkers
**** Spelling
#+begin_src emacs-lisp
(setq! ispell-dictionary "english")
(setq! ispell-personal-dictionary (expand-file-name ".ispell-personal-dictionary" doom-private-dir))
#+end_src

** Visuals
*** Good scroll
#+begin_src emacs-lisp
(use-package! good-scroll
  :hook
  (after-init . good-scroll-mode))
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! good-scroll)
#+end_src

*** Mixed pitch
#+begin_src emacs-lisp
(add-hook! (org-mode LaTeX-mode markdown-mode gfm-mode Info-mode) #'mixed-pitch-mode)
#+end_src

** Questionable stuff
*** Elcord
I use Emacs btw (only if discord is installed).
#+begin_src emacs-lisp :tangle packages.el
(package! elcord :disable (not (executable-find "discord")))
#+end_src

#+begin_src emacs-lisp
(use-package! elcord
  :hook
  (after-init . elcord-mode)
  :commands elcord-mode
  :config
  (setq! elcord-quiet t)
  (setq! elcord-use-major-mode-as-main-icon t))
#+end_src

* Applications
** Emacs application framework
#+begin_src emacs-lisp :tangle no
(use-package! eaf
  :defer-incrementally t
  :custom
  (eaf-apps-to-install '(browser
                         pdf-viewer
                         org-previewer
                         markdown-previewer)))

(use-package! eaf-browser
  :defer-incrementally t
  :after eaf)

(use-package! eaf-mail
  :defer-incrementally t
  :after eaf
  :config
  (after! mu4e
    (map! :map mu4e-view-mode-map
          "o" 'eaf-open-mail-as-html)))

(use-package! eaf-pdf-viewer
  :defer-incrementally t
  :after eaf)

(use-package! eaf-org-previewer
  :defer-incrementally t
  :after eaf)

(use-package! eaf-markdown-previewer
  :defer-incrementally t
  :after eaf)
#+end_src

#+begin_src emacs-lisp :tangle no
(package! emacs-application-framework
  :recipe (:host github :repo "manateelazycat/emacs-application-framework" :files ("*")))
#+end_src

** Email
*** mu4e
#+begin_src emacs-lisp
(after! mu4e
  (setq! ; sendmail setup
         sendmail-program (executable-find "msmtp")
         send-mail-function #'smtpmail-send-it
         message-sendmail-f-is-evil t
         message-sendmail-extra-arguments '("--read-envelope-from")
         message-send-mail-function #'message-send-mail-with-sendmail
         ; getmail setup
         +mu4e-backend 'mbsync
         mu4e-get-mail-command "mbsync -a -c ~/.config/mbsync/config"
         ; misc
         mu4e-compose-signature-auto-include t
         mu4e-update-interval (* 5 60)
         mu4e-context-policy 'ask-if-none
         mu4e-compose-context-policy 'always-ask))
#+end_src

*** External config (defaults)
**** mbsync
#+begin_src conf :tangle ~/.config/mbsync/config
SyncState *
Create Both
Expunge Both
#+end_src

**** msmtp
#+begin_src conf :tangle ~/.config/msmtp/config
defaults
auth on
tls on
#+end_src

*** Accounts
**** mtataryn555@gmail.com
***** mu4e config
#+begin_src emacs-lisp
(after! mu4e
  (set-email-account! "p mtataryn555@gmail.com"
                      `((user-full-name     . "Mykola Tataryn")
                        (user-mail-address  . "mtataryn555@gmail.com")
                        (mu4e-sent-folder   . "/mtataryn555@gmail.com/Sent")
                        (mu4e-drafts-folder . "/mtataryn555@gmail.com/Drafts")
                        (mu4e-trash-folder  . "/mtataryn555@gmail.com/Trash")
                        (mu4e-refile-folder . "/mtataryn555@gmail.com/Archive")

                        (mu4e-maildir-shortcuts . ((:maildir "/mtataryn555@gmail.com/Inbox"   :key ?i)
                                                   (:maildir "/mtataryn555@gmail.com/Sent"    :key ?s)
                                                   (:maildir "/mtataryn555@gmail.com/Drafts"  :key ?d)
                                                   (:maildir "/mtataryn555@gmail.com/Trash"   :key ?t)
                                                   (:maildir "/mtataryn555@gmail.com/Archive" :key ?a)))

                        (mu4e-bookmarks . ((:name "[mtataryn555@gmail] Unread messages"
                                            :query "flag:unread AND NOT flag:trashed AND maildir:/mtataryn555@gmail.com/*"
                                            :key ?u)
                                           (:name "[mtataryn555@gmail] Today's messages"
                                            :query "date:today..now AND NOT flag:trashed AND maildir:/mtataryn555@gmail.com/*"
                                            :key ?t)
                                           (:name "[mtataryn555@gmail] Last 7 days"
                                            :query "date:7d..now AND NOT flag:trashed AND maildir:/mtataryn555@gmail.com/*"
                                            :key ?w :hide-unread t)
                                           (:name "[mtataryn555@gmail] Flagged messages"
                                            :query "flag:flagged AND maildir:/mtataryn555@gmail.com/*"
                                            :key ?f)
                                           (:name "Unread messages"
                                            :query "flag:unread AND NOT flag:trashed"
                                            :key ?U)
                                           (:name "Today's messages"
                                            :query "date:today..now AND NOT flag:trashed"
                                            :key ?T)
                                           (:name "Last 7 days"
                                            :query "date:7d..now AND NOT flag:trashed"
                                            :key ?W :hide-unread t)
                                           (:name "Flagged messages"
                                            :query "flag:flagged"
                                            :key ?F)))

                        (smtpmail-smtp-user       . "mtataryn555@gmail.com")
                        (+mu4e-personal-addresses . ("mtataryn555@gmail.com"))

                        (mu4e-compose-signature   . ,(concat "-----\n"
                                                             "Mykola Tataryn"))

                        (org-msg-signature        . ,(concat "-----\n"
                                                             "#+begin_signature\n"
                                                             "Mykola Tataryn\n"
                                                             "#+end_signature")))
                      t))
#+end_src

***** mbsync config
#+begin_src conf :tangle ~/.config/mbsync/config
IMAPStore mtataryn555@gmail.com-remote
Host imap.gmail.com
SSLType IMAPS
AuthMechs LOGIN
User mtataryn555@gmail.com
PassCmd "secret-tool lookup application email account mtataryn555@gmail.com"

MaildirStore mtataryn555@gmail.com-local
Path ~/.mail/mtataryn555@gmail.com/
Inbox ~/.mail/mtataryn555@gmail.com/Inbox
Trash Trash
SubFolders Verbatim

Channel mtataryn555@gmail.com-inbox
Far :mtataryn555@gmail.com-remote:
Near :mtataryn555@gmail.com-local:

Channel mtataryn555@gmail.com-sent
Far :mtataryn555@gmail.com-remote:"[Gmail]/Sent Mail"
Near :mtataryn555@gmail.com-local:Sent

Channel mtataryn555@gmail.com-drafts
Far :mtataryn555@gmail.com-remote:[Gmail]/Drafts
Near :mtataryn555@gmail.com-local:Drafts

Channel mtataryn555@gmail.com-trash
Far :mtataryn555@gmail.com-remote:[Gmail]/Trash
Near :mtataryn555@gmail.com-local:Trash

Channel mtataryn555@gmail.com-archive
Far :mtataryn555@gmail.com-remote:Archive
Near :mtataryn555@gmail.com-local:Archive

Group mtataryn555@gmail.com
Channel mtataryn555@gmail.com-inbox
Channel mtataryn555@gmail.com-sent
Channel mtataryn555@gmail.com-drafts
Channel mtataryn555@gmail.com-trash
Channel mtataryn555@gmail.com-archive
#+end_src

***** msmtp config
#+begin_src conf :tangle ~/.config/msmtp/config
account mtataryn555@gmail.com
host smtp.gmail.com
port 587
from mtataryn555@gmail.com
user mtataryn555@gmail.com
passwordeval "secret-tool lookup application email account mtataryn555@gmail.com"

account default : mtataryn555@gmail.com
#+end_src

**** mykola.tataryn@apriorit.com
***** mu4e config
#+begin_src emacs-lisp
(after! mu4e
  (set-email-account! "a mykola.tataryn@apriorit.com"
                      `((user-full-name     . "Mykola Tataryn")
                        (user-mail-address  . "mykola.tataryn@apriorit.com")
                        (mu4e-sent-folder   . "/mykola.tataryn@apriorit.com/Sent")
                        (mu4e-drafts-folder . "/mykola.tataryn@apriorit.com/Drafts")
                        (mu4e-trash-folder  . "/mykola.tataryn@apriorit.com/Trash")
                        (mu4e-refile-folder . "/mykola.tataryn@apriorit.com/Archive")

                        (mu4e-maildir-shortcuts . ((:maildir "/mykola.tataryn@apriorit.com/Inbox"   :key ?i)
                                                   (:maildir "/mykola.tataryn@apriorit.com/Sent"    :key ?s)
                                                   (:maildir "/mykola.tataryn@apriorit.com/Drafts"  :key ?d)
                                                   (:maildir "/mykola.tataryn@apriorit.com/Trash"   :key ?t)
                                                   (:maildir "/mykola.tataryn@apriorit.com/Archive" :key ?a)))

                        (mu4e-bookmarks . ((:name "[mykola.tataryn@apriorit.com] Unread messages"
                                            :query "flag:unread AND NOT flag:trashed AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?u)
                                           (:name "[mykola.tataryn@apriorit.com] Today's messages"
                                            :query "date:today..now AND NOT flag:trashed AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?t)
                                           (:name "[mykola.tataryn@apriorit.com] Last 7 days"
                                            :query "date:7d..now AND NOT flag:trashed AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?w :hide-unread t)
                                           (:name "[mykola.tataryn@apriorit.com] Flagged messages"
                                            :query "flag:flagged AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?f)
                                           (:name "[mykola.tataryn@apriorit.com] Varjo"
                                            :query "contact:varjo@apriorit.com OR subject:[varjo] AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?v)
                                           (:name "[mykola.tataryn@apriorit.com] Sotero"
                                            :query "contact:sotero@apriorit.com OR subject:[sotero] AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?s)
                                           (:name "[mykola.tataryn@apriorit.com] Jira"
                                            :query "subject:[jira] AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?j)
                                           (:name "[mykola.tataryn@apriorit.com] Confluence"
                                            :query "subject:[confluence] AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?c)
                                           (:name "Unread messages"
                                            :query "flag:unread AND NOT flag:trashed"
                                            :key ?U)
                                           (:name "Today's messages"
                                            :query "date:today..now AND NOT flag:trashed"
                                            :key ?T)
                                           (:name "Last 7 days"
                                            :query "date:7d..now AND NOT flag:trashed"
                                            :key ?W :hide-unread t)
                                           (:name "Flagged messages"
                                            :query "flag:flagged"
                                            :key ?F)))

                        (smtpmail-smtp-user       . "mykola.tataryn@apriorit.com")
                        (+mu4e-personal-addresses . ("mykola.tataryn@apriorit.com"))

                        (mu4e-compose-signature   . ,(concat "-----\n"
                                                             "Best regards,\n"
                                                             "Mykola Tataryn,\n"
                                                             "Software Developer of Apriorit - A Priority Choice!\n"
                                                             "Visit us at http://www.apriorit.com"))

                        (org-msg-signature        . ,(concat "-----\n"
                                                             "#+begin_signature\n"
                                                             "Best regards,\n\n"
                                                             "Mykola Tataryn,\n\n"
                                                             "Software Developer of Apriorit - A Priority Choice!\n\n"
                                                             "Visit us at [[https://apriorit.com]]\n"
                                                             "#+end_signature")))
                      t))
#+end_src

***** mbsync config
#+begin_src conf :tangle ~/.config/mbsync/config
Host long.apriorit.com
Port 40993
User mykola.tataryn@apriorit.com
AuthMechs LOGIN
PassCmd "secret-tool lookup application email account mykola.tataryn@apriorit.com"
SSLType IMAPS

MaildirStore mykola.tataryn@apriorit.com-local
Path ~/.mail/mykola.tataryn@apriorit.com/
Inbox ~/.mail/mykola.tataryn@apriorit.com/Inbox
Trash Trash
SubFolders Verbatim

Channel mykola.tataryn@apriorit.com-inbox
Far :mykola.tataryn@apriorit.com-remote:
Near :mykola.tataryn@apriorit.com-local:
Sync Pull

Channel mykola.tataryn@apriorit.com-sent
Far :mykola.tataryn@apriorit.com-remote:Sent
Near :mykola.tataryn@apriorit.com-local:Sent
Sync Pull

Channel mykola.tataryn@apriorit.com-drafts
Far :mykola.tataryn@apriorit.com-remote:Drafts
Near :mykola.tataryn@apriorit.com-local:Drafts
Sync Pull

Channel mykola.tataryn@apriorit.com-trash
Far :mykola.tataryn@apriorit.com-remote:Trash
Near :mykola.tataryn@apriorit.com-local:Trash
Sync Pull

# Channel mykola.tataryn@apriorit.com-archive
# Far :mykola.tataryn@apriorit.com-remote:Archive
# Near :mykola.tataryn@apriorit.com-local:Archive
# Sync Pull

Group mykola.tataryn@apriorit.com
Channel mykola.tataryn@apriorit.com-inbox
Channel mykola.tataryn@apriorit.com-sent
Channel mykola.tataryn@apriorit.com-drafts
Channel mykola.tataryn@apriorit.com-trash
# Channel mykola.tataryn@apriorit.com-archive
#+end_src

***** msmtp config
#+begin_src conf :tangle ~/.config/msmtp/config
account mykola.tataryn@apriorit.com
host long.apriorit.com
port 40465
from mykola.tataryn@apriorit.com
user mykola.tataryn@apriorit.com
passwordeval "secret-tool lookup application email account mykola.tataryn@apriorit.com"
#+end_src

* Language configuration
** Org
#+begin_src emacs-lisp
(after! org
  (setq! org-directory "~/Org/agenda")
  (setq! org-roam-directory "~/Org/roam")
  (setq! org-agenda-files '("~/Org/agenda"))
  (setq! org-cite-global-bibliography '("~/Org/bibliography.bib"))
  (setq! org-latex-compiler '"xelatex")
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))

(use-package! org-tempo
  :after org)
#+end_src

*** Behaviour
**** Auto tangle mode
#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :hook
  (org-mode . org-auto-tangle-mode))
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! org-auto-tangle)
#+end_src

**** Alerts
#+begin_src emacs-lisp :tangle packages.el
(package! org-alert)
#+end_src

#+begin_src emacs-lisp
(use-package! org-alert
  :hook
  (after-init . org-alert-enable))
#+end_src

*** Exporting
Make org recognize first /five/ levels of headings as headings when exporting
#+begin_src emacs-lisp
(setq! org-export-headline-levels 5)
#+end_src

*** Latex export
**** System dependencies
***** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
texlive-core
texlive-latexextra
texlive-fontsextra
texlive-langcyrillic
texlive-pictures
#+end_src

***** Aptitude packages
#+begin_src fundamental :noweb-ref apt-packages
texlive-full
#+end_src

**** Export settings
#+begin_src conf :tangle ~/.config/environment.d/texmf.conf
TEXMFHOME=${HOME}/.local/share/texmf
#+end_src

#+begin_src emacs-lisp
(after! org
  (setq! org-latex-classes
         '(("beamer" "\\documentclass[presentation]{beamer}"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
           ("article" "\\documentclass[11pt]{article}"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
            ("\\paragraph{%s}" . "\\paragraph*{%s}")
            ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
           ("report" "\\documentclass[11pt]{report}"
            ("\\part{%s}" . "\\part*{%s}")
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
           ("book" "\\documentclass[11pt]{book}"
            ("\\part{%s}" . "\\part*{%s}")
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
           ("dstu-report" "\\documentclass{satan/dstu-report}"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
            ("\\paragraph{%s}" . "\\paragraph*{%s}")
            ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))))
#+end_src

**** TODO Default style

**** TODO DSTU 3008-2015 Style
#+begin_src latex :tangle ~/.local/share/texmf/tex/xelatex/satan/dstu-report.cls
\NeedsTeXFormat{LaTeX2e}
\ProvidesClass{satan/dstu-article}

\LoadClass[14pt,a4paper]{article}

% indentfirst paragraph (it needs to be loaded before polyglossia)
\RequirePackage{indentfirst}

% polyglossia setup
\RequirePackage{fontspec}
\RequirePackage{polyglossia}
\setdefaultlanguage{ukrainian}
\setotherlanguage{english}

% fontspec setup
\setmainfont{Times New Roman}
\setsansfont{Noto Sans}
\setmonofont{Noto Sans Mono}

% page layout
\RequirePackage[paper=a4paper,top=2cm,bottom=2cm,left=2.5cm,right=1cm]{geometry}

% paragraphs and linespread
\setlength{\parindent}{5ex}
\setlength{\parskip}{0pt}
\linespread{1.3}
#+end_src

*** HTML export
**** Mathjax
#+begin_src emacs-lisp
(after! org
  (setq! org-html-mathjax-options
         '((path "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js" )
           (scale "1")
           (autonumber "ams")
           (multlinewidth "85%")
           (tagindent ".8em")
           (tagside "right"))))
#+end_src

*** Reveal export
#+begin_src emacs-lisp
(after! org
  (setq! org-re-reveal-theme "night"
         org-re-reveal-transition "slide"
         org-re-reveal-plugins '(markdown notes math search zoom)
         org-re-reveal-width (display-pixel-width)
         org-re-reveal-height (display-pixel-height)))
#+end_src

** NASM
#+begin_src emacs-lisp :tangle packages.el
(package! nasm-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! nasm-mode
  :mode "\\.asm\\'")
#+end_src

** Systemd
For editing systemd unit files
#+begin_src emacs-lisp :tangle packages.el
(package! systemd :pin "b6ae63a236605b1c5e1069f7d3afe06ae32a7bae")
#+end_src

#+begin_src emacs-lisp
(use-package! systemd
  :defer t)
#+end_src
