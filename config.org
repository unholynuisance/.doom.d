#+property: header-args:emacs-lisp+ :tangle yes :eval yes
#+property: header-args :tangle no :results silent :eval no-export :mkdirp yes

* Early config
This is a section for things that other stuff depends on, so they should be loaded early.

** Enable lexical binding
We want lexical binding, right?

#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
#+end_src

** File manipulation
I'd like to have a some file manipulation utilities from [[https://github.com/rejeep/f.el][f.el]].
#+begin_src emacs-lisp :tangle packages.el
(package! f)
#+end_src

#+begin_src emacs-lisp
(use-package f)
#+end_src

** Profiles
#+begin_src emacs-lisp
(defvar
  satan/profiles-profile-dir
  (file-name-concat doom-private-dir "profiles"))

(defvar
  satan/profiles-default-profile
  "default.el")

(defvar
  satan/profiles-active-profile
  "active.el")

(defvar
  satan/profiles-keyboard-layout
  "default")

(defun satan/profiles-load-profile (file)
  (let ((profile (read (f-read-text file))))
    (setq satan/profiles-keyboard-layout
          (or (plist-get profile :keyboard-layout)
              satan/profiles-keyboard-layout))))

(defun satan/profiles-load-active-profile ()
  (let ((active-profile-file (file-name-concat satan/profiles-profile-dir satan/profiles-active-profile))
        (default-profile-file (file-name-concat satan/profiles-profile-dir satan/profiles-default-profile)))
    (if (file-exists-p active-profile-file)
        (satan/profiles-load-profile active-profile-file)
      (satan/profiles-load-profile default-profile-file))))

(defun satan/profiles-set-active-profile ()
  (interactive)
  (let* ((profile (completing-read
                   "Select profile: "
                   (directory-files satan/profiles-profile-dir ())
                   (lambda (value) (not (member value `("." ".." ,satan/profiles-active-profile))))
                   t))
         (active-profile-file (file-name-concat satan/profiles-profile-dir satan/profiles-active-profile))
         (profile-file (file-name-concat satan/profiles-profile-dir profile)))
    (make-symbolic-link profile-file active-profile-file t)
    (satan/profiles-load-active-profile)))

(satan/profiles-load-active-profile)
#+end_src

Default profile:
#+begin_src emacs-lisp :tangle profiles/default.el
(:keyboard-layout "default" ;; possible layouts: ("default" "moonlander")
)
#+end_src

Desktop profile:
#+begin_src emacs-lisp :tangle profiles/desktop.el
(:keyboard-layout "moonlander" ;; possible layouts: ("default" "moonlander")
)
#+end_src

** Current system
Let's define a straightforward way to check for system we are on (subject to change).
#+name: current-system
#+begin_src emacs-lisp :tangle init.el :eval :session
(defun satan/file-contents (filename)
  "Return the contents of FILENAME."
  (with-temp-buffer
    (insert-file-contents filename)
    (buffer-string)))

(defun satan/current-system-type ()
  (cond
   ((eq system-type 'gnu/linux)                    "Linux")
   ((memq system-type '(cygwin windows-nt ms-dos)) "Windows")
   ((eq system-type 'darwin)                       "Mac")
   ((or IS-MAC (eq system-type 'berkeley-unix))    "BSD")
   (t                                              "Unknown")))

(defun satan/current-system ()
  "Return string containing current system capitalized name, or `\"Unknown\"'"
  (capitalize
   (downcase
    (pcase (satan/current-system-type)
          ("Linux"
           (save-match-data
             (let ((contents (satan/file-contents "/etc/os-release")))
               (string-match "^ID=\\(\\\w*\\)" contents)
               (match-string 1 contents))))
          (type type)))))

(defun satan/current-system-p (&rest args)
  "Return non-nil if `satan/current-system' is in ARGS"
  (or (member (satan/current-system) args)
      (member (satan/current-system-type) args)))
#+end_src

As [[current-system]] is not evaluated during tangle, we need to somehow enforce evaluation.
#+begin_src emacs-lisp :tangle (make-temp-file "") :noweb yes
<<current-system()>>
#+end_src

** Current display server
We may want to know which display server we are running, so it would be nice to have a utility similar to [[current-system]].
#+name: current-display-server
#+begin_src emacs-lisp :tangle init.el :eval :session
(defun satan/current-display-server ()
  "Return string containing current display server capitalized name, or `\"Unknown\"'"
  (capitalize
    (string-trim
     (or
      (shell-command-to-string
       "loginctl show-session $(awk '/tty/ {print $1}' <(loginctl)) -p Type | awk -F= '{print $2}'")
      (if (eq system-type 'windows-nt) "DWM")
      "Unknown"))))

(defun satan/current-display-server-p (&rest args)
  "Return non-nil if `satan/current-display-server' is in ARGS"
  (member (satan/current-display-server) args))
#+end_src

Same as with [[current-system]], [[current-display-server]] has to be evaluated.
#+begin_src emacs-lisp :tangle (make-temp-file "") :noweb yes
<<current-display-server()>>
#+end_src

* Installation
** Packaging
*** Pacman
#+begin_src conf :tangle pkg/pacman/PKGBUILD :noweb yes
# Maintainer: son-of-satan <mtataryn555@gmail.com>
pkgname=satanic-emacs-packages
pkgver=1
pkgrel=1
pkgdesc="Packages needed by my emacs setup"
arch=('any')
license=('WTFPL')
depends=(
    <<pacman-packages>>
)
#+end_src

** Doom dependencies
**** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
emacs ripgrep fd python cmake
#+end_src

**** Aptitude packages
#+begin_src fundamental :noweb-ref apt-packages
emacs ripgrep fd-find python3 cmake
#+end_src

**** Chocolatey packages
#+begin_src fundamental :noweb-ref chocolatey-packages
emacs ripgrep fd python3 cmake
#+end_src

** Install script
*** Arch
#+begin_src sh :shebang #!/bin/bash :tangle (if (satan/current-system-p "Arch") "bin/install.sh" "no")
cd ~/.config/doom/pkg/pacman
paru -Ui
#+end_src

*** Ubuntu
Because we are using noweb here, the syntax highlighting will break in this code block. So we need to split the script.
#+begin_src sh :shebang #!/bin/bash :tangle (if (satan/current-system-p "Ubuntu") "bin/install.sh" "no") :noweb yes
APT_PACKAGES=(
    <<apt-packages>>
)
#+end_src

And the other half of a script.
#+begin_src sh :shebang #!/bin/bash :tangle (if (satan/current-system-p "Ubuntu") "bin/install.sh" "no")
sudo apt update
sudo apt install "${APT_PACKAGES[@]}"

[[ -f /usr/bin/fd ]] || sudo ln -s /usr/bin/fdfind /usr/bin/fd
#+end_src

*** Windows
I'm making two assumptions here:
+ Git bash is installed (as you would need git to clone the repository).
+ =Chocolatey= has been installed (otherwise it would be a nightmare to install dependencies).

Similar to [[Ubuntu]] section, we need to split the script to get proper syntax highlighting.
#+begin_src sh :shebang #!/bin/bash :tangle (if (satan/current-system-p "Windows") "bin/install.sh" "no") :noweb yes
CHOCOLATEY_PACKAGES=(
    <<chocolatey-packages>>
)
#+end_src

#+begin_src sh :shebang #!/bin/bash :tangle (if (satan/current-system-p "Windows") "bin/install.sh" "no")
choco install -y "${CHOCOLATEY_PACKAGES[@]}"
#+end_src

** Init script
This script tangles this file, clones [[https://github.com/doomemacs/doomemacs][Doom Emacs]] and then runs setup scripts.
#+begin_src sh :shebang #!/bin/bash :tangle bin/init.sh :noweb yes
emacs --batch --eval "
(progn
  (require 'org)
  (setq org-confirm-babel-evaluate nil)
  (org-babel-tangle-file \"~/.config/doom/config.org\"))
"

# ~/.config/doom/bin/install.sh

git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.config/emacs

~/.config/emacs/bin/doom -y install || ~/.config/emacs/bin/doom build
~/.config/doom/bin/setup.sh
#+end_src

* General configuration
** Keybindings
*** Doom leader keys:
#+begin_src emacs-lisp
(setq doom-leader-alt-key "C-SPC")
(setq doom-localleader-alt-key "C-SPC l")
#+end_src

*** Rebind set-mark-command
#+begin_src emacs-lisp
(map! :leader :desc "Mark" "C-SPC"#'set-mark-command)
#+end_src

** UI
*** Transparency
I prefer my Emacs windows to be slightly transparent. So let's set a default ~alpha~ and ~alpha-background~ for new frames.
#+begin_src emacs-lisp
(defvar satan/default-alpha '(100 . 100))
(defvar satan/default-alpha-background 95)

(modify-all-frames-parameters
 `((alpha . ,satan/default-alpha)
   (alpha-background . ,satan/default-alpha-background)))
#+end_src

While we are at it, let's add some convenience functions to set current frame transparency.
#+begin_src emacs-lisp
(defun satan/set-alpha (active &optional inactive)
  (interactive "p")
  (set-frame-parameter (selected-frame) 'alpha
                       (cons active (or inactive (cdr (frame-parameter (selected-frame) 'alpha))))))

(defun satan/set-alpha-background (alpha)
  (interactive "p")
  (set-frame-parameter (selected-frame) 'alpha-background alpha))
#+end_src


We can go further and define the following minor mode.
#+begin_src emacs-lisp
(defvar satan/transparent-mode-alpha-background 50)

(define-minor-mode satan/transparent-mode
  nil
  :global t
  (if satan/transparent-mode
      (satan/set-alpha-background satan/transparent-mode-alpha-background)
    (satan/set-alpha-background satan/default-alpha-background)))
#+end_src

Also, let's set a sensible keybind for this mode.
#+begin_src emacs-lisp
(map! :leader
      (:prefix "t"
       :desc "Transparent mode" "t" #'satan/transparent-mode))
#+end_src

*** Fonts
#+begin_src emacs-lisp
(pcase (satan/current-system)
  ("Arch"
   (setq! doom-font
          (font-spec :family "IBM Plex Mono" :size 16)
          doom-big-font
          (font-spec :family "IBM Plex Mono" :size 24)
          doom-variable-pitch-font
          (font-spec :family "IBM Plex Serif")
          doom-serif-font
          (font-spec :family "IBM Plex Mono")))
  ("Ubuntu"
   (setq! doom-font
          (font-spec :family "Fira Code" :size 16)
          doom-big-font
          (font-spec :family "Fira Code" :size 24)))
  ("Windows"
   (setq! doom-font
          (font-spec :family "Fira Code" :size 16)
          doom-big-font
          (font-spec :family "Fira Code" :size 24)
          doom-variable-pitch-font
          (font-spec :family "Julia Mono")
          doom-unicode-font
          (font-spec :family "Julia Mono"))))
#+end_src

**** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
ttf-fira-code ttf-juliamono
#+end_src

**** Aptitude packages
#+begin_src funtamental :noweb-ref apt-packages
fonts-firacode fonts-noto
#+end_src

**** Chocolatey packages
#+begin_src funtamental :noweb-ref chocolatey-packages
firacode noto
#+end_src

*** Line numbers
It's convenient when you can see distance between current line and the line you want to jump to, isn't it?
#+begin_src emacs-lisp
(setq! display-line-numbers-type 'visual)
#+end_src

*** Theme
#+begin_src emacs-lisp
(setq! doom-theme 'doom-dracula)
(setq! doom-themes-enable-italic t)
#+end_src

*** Dashboard
Change dashboard buffer name to =*dashboard*=:
#+begin_src emacs-lisp
(setq +doom-dashboard-name "*dashboard*")
(setq doom-fallback-buffer-name "*dashboard*")
#+end_src

Menu sections:
#+begin_src emacs-lisp
(setq +doom-dashboard-menu-sections
      '(("Reload last session"
         :icon (nerd-icons-codicon "nf-cod-history" :face 'doom-dashboard-menu-title)
         :when (cond ((modulep! :ui workspaces)
                      (file-exists-p (expand-file-name persp-auto-save-fname persp-save-dir)))
                     ((require 'desktop nil t)
                      (file-exists-p (desktop-full-file-name))))
         :face (:inherit (doom-dashboard-menu-title bold))
         :action doom/quickload-session)
        ("Open org-agenda"
         :icon (nerd-icons-codicon "nf-cod-calendar" :face 'doom-dashboard-menu-title)
         :when (fboundp 'org-agenda)
         :action org-agenda)
        ("Recently opened files"
         :icon (nerd-icons-codicon "nf-cod-file" :face 'doom-dashboard-menu-title)
         :action recentf-open-files)
        ("Open project"
         :icon (nerd-icons-codicon "nf-cod-briefcase" :face 'doom-dashboard-menu-title)
         :action projectile-switch-project)
        ("Jump to bookmark"
         :icon (nerd-icons-codicon "nf-cod-bookmark" :face 'doom-dashboard-menu-title)
         :action bookmark-jump)
        ("Open private configuratiqon"
         :icon (nerd-icons-codicon "nf-cod-tools" :face 'doom-dashboard-menu-title)
         :when (file-directory-p doom-private-dir)
         :action doom/open-private-config)))
#+end_src

Banner:
#+begin_src emacs-lisp
(setq fancy-splash-image (concat (file-name-as-directory doom-private-dir) "resources/splash-images/kurisu.png"))
#+end_src

*** Doom quit
#+begin_src emacs-lisp
(setq +doom-quit-messages '("It's not like I'll miss you or anything, b-baka!"))
#+end_src

*** Time
I often run Emacs in fullscreen, and thus I can't see my system clock. We can fix that by displaying time on the modeline.
#+begin_src emacs-lisp
(setq! display-time-format "%H:%M")
(setq! display-time-default-load-average nil)

(add-hook! doom-init-ui #'display-time-mode)
#+end_src

*** Modeline
#+begin_src emacs-lisp
(after! doom-modeline
  (setq doom-modeline-height 40
        doom-modeline-persp-name t
        doom-modeline-display-default-persp-name t
        doom-modeline-major-mode-icon t
        doom-modeline-enable-word-count t))
#+end_src

** Other
*** New frames
I have (or had) two problems with new frames:
+ Sometimes, if you resize frame, close it, and open new frame, that new frame is the size of previous one, and, for example, the dashboard might not fit in.
+ New frames are not centered.

Fortunately, we can fix the first problem by modifying ~default-frame-alist~.
#+begin_src emacs-lisp
(modify-all-frames-parameters
 '((width . 90)
   (height . 43)))

(defun satan/resize-frame (&optional frame)
  (interactive)
  (modify-frame-parameters frame '((width . 90) (height . 43))))
#+end_src

To fix the second problem, we can use the following function (taken from [[https://christiantietze.de/posts/2022/04/emacs-center-window-current-monitor-simplified/][here]]) that centers the frame.
#+begin_src emacs-lisp
(defun satan/center-frame (&optional frame)
  "Center FRAME on the screen.
FRAME can be a frame name, a terminal name, or a frame.
If FRAME is omitted or nil, use currently selected frame."
  (interactive)
  (unless (eq 'maximised (frame-parameter nil 'fullscreen))
    (modify-frame-parameters
     frame '((user-position . t) (top . 0.5) (left . 0.5)))))
#+end_src

And add it to one of ~doom-init-ui~ or ~server-after-make-frame~ hooks.
#+begin_src emacs-lisp
(defun satan/fix-frame (&optional frame)
  (satan/resize-frame frame)
  (satan/center-frame frame)
  (doom/reload-theme))

(if (daemonp)
  (add-hook! server-after-make-frame
             #'satan/fix-frame)
  (add-hook! doom-init-ui
             #'satan/fix-frame))
#+end_src

*** Preferred encoding
Just in case.
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
#+end_src

*** Daemon mode
**** Systemd service
Default Systemd service that comes with Emacs from version =2.6= has ~Restart~ set to ~on-failure~, and i would like it to be ~always~.
#+begin_src conf :tangle (if (executable-find "systemctl") "~/.config/systemd/user/emacs.service" "no")
[Unit]
Description=Emacs text editor
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=notify
ExecStart=/usr/bin/emacs --fg-daemon
SuccessExitStatus=15
Restart=always

[Install]
WantedBy=default.target
#+end_src

**** .desktop
We may need a =.desktop= file for =emacsclient=.
#+begin_src conf :tangle (if (satan/current-system-p "Linux") "~/.local/share/applications/emacs.desktop" "no")
[Desktop Entry]
Name=Emacs
GenericName=Text Editor
Comment=Edit text
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacsclient --create-frame %F
Icon=emacs
Type=Application
Terminal=false
Categories=Development;TextEditor;Utility;
StartupNotify=true
StartupWMClass=Emacs
Keywords=Text;Editor;
Actions=new-window;no-daemon;restart-daemon;

[Desktop Action new-window]
Name=New Window
Exec=emacsclient --create-frame %F

[Desktop Action no-daemon]
Name=No Daemon
Exec=emacs %F

[Desktop Action restart-daemon]
Name=Restart Daemon
Exec=systemctl --user restart emacs
#+end_src

*** TODO Alerts
There are some packages in this config using [[https://github.com/jwiegley/alert][alert.el]], so it would be nice to set it up depending on platform we are on.
#+begin_src emacs-lisp
(setq! alert-default-style 'notifications)
#+end_src

* Packages
** Doom packages
#+begin_src emacs-lisp :tangle init.el :noweb yes
(doom!
 <<doom-packages>>
 )
#+end_src

*** Input
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:input
;;chinese
;;japanese
;;layout            ; auie,ctsrnm is the superior home row
#+end_src

*** Completion
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:completion
;;company           ; the ultimate code completion backend
(corfu            ; complete with cap(f), cape and a flying feather
 +icons)
;;helm              ; the *other* search engine for love and life
;;ido               ; the other *other* search engine...
;;(ivy            ; a search engine for love and life
;; +icons)
(vertico          ; the search engine of the future
 +icons)
#+end_src

*** UI
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:ui
;;deft              ; notational velocity for Emacs
doom              ; what makes DOOM look the way it does
doom-dashboard    ; a nifty splash screen for Emacs
doom-quit         ; DOOM quit-message prompts when you quit Emacs
(emoji +unicode)  ; 🙂
hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;;hydra
;;indent-guides     ; highlighted indent columns
;;(:if (>= (string-to-number emacs-version) 28)
;; ligatures
;; +extra)          ; ligatures and symbols to make your code pretty again
;;minimap           ; show a map of the code on the side
modeline          ; snazzy, Atom-inspired modeline, plus API
;;nav-flash         ; blink cursor line after big motions
;;neotree           ; a project drawer, like NERDTree for vim
ophints           ; highlight the region an operation acts on
(popup +defaults)   ; tame sudden yet inevitable temporary windows
;;tabs              ; a tab bar for Emacs
treemacs          ; a project drawer, like neotree but cooler
;;unicode           ; extended unicode support for various languages
vc-gutter         ; vcs diff in the fringe
vi-tilde-fringe   ; fringe tildes to mark beyond EOB
(window-select    ; visually switch windows
 +numbers)
workspaces        ; tab emulation, persistence & separate workspaces
zen               ; distraction-free coding or writing
#+end_src

*** Editor
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:editor
;; (evil          ; come to the dark side, we have cookies
;;  +everywhere)
file-templates    ; auto-snippets for empty files
fold              ; (nigh) universal code folding
(format           ; automated prettiness
 +onsave)
;;god               ; run Emacs commands without modifier keys
;;lispy             ; vim for lisp, for people who don't like vim
multiple-cursors  ; editing in many places at once
;;objed             ; text object editing for the innocent
;;parinfer          ; turn lisp into python, sort of
rotate-text       ; cycle region at point between text candidates
snippets          ; my elves. They type so I don't have to
word-wrap         ; soft wrapping with language-aware indent
#+end_src

*** Emacs
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:emacs
(dired          ; making dired pretty [functional]
 +icons)
electric          ; smarter, keyword-based electric-indent
(ibuffer        ; interactive buffer management
 +icons)
undo              ; persistent, smarter undo for your inevitable mistakes
vc                ; version-control and Emacs, sitting in a tree
#+end_src

*** Term
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:term
;;eshell            ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
vterm             ; the best terminal emulation in Emacs
#+end_src

**** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
libtool
#+end_src

**** Aptitude packages
#+begin_src fundamental :noweb-ref apt-packages
libtool-bin
#+end_src

*** Checkers
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:checkers
syntax                 ; tasing you for every semicolon you forget
;; grammar             ; tasing every grammar mistake you make
#+end_src

**** Spelling
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
(:if (executable-find "aspell")
 (spell                 ; tasing you for misspelling mispelling
 +flyspell
 +aspell
 +everywhere))
#+end_src

**** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
aspell-en aspell-uk
#+end_src

**** Aptitude packages
#+begin_src fundamental :noweb-ref apt-packages
aspell-en aspell-uk
#+end_src

*** Tools
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:tools
;;ansible
biblio            ; Writes a PhD for you (citation needed)
debugger          ; FIXME stepping through code, to help you add bugs
direnv
docker
editorconfig      ; let someone else argue about tabs vs spaces
;;ein               ; tame Jupyter notebooks with emacs
(eval             ; run code, run (also, repls)
 +overlay)
;;gist              ; interacting with github gists
lookup              ; navigate your code and its documentation
lsp               ; M-x vscode
magit             ; a git porcelain for Emacs
make              ; run make tasks from Emacs
;;pass              ; password manager for nerds
pdf               ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
rgb               ; creating color strings
taskrunner        ; taskrunner for all your projects
;;terraform         ; infrastructure as code
;;tmux              ; an API for interacting with tmux
;;upload            ; map local to remote projects via ssh/ftp
tree-sitter       ;
#+end_src

**** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
editorconfig-core-c
#+end_src

**** Aptitude packages
#+begin_src fundamental :noweb-ref apt-packages
editorconfig
#+end_src

*** OS
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:os
(:if IS-MAC       ; improve compatibility with macOS
 macos)
tty               ; improve the terminal Emacs experience
#+end_src

*** Lang
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:lang
;;agda              ; types of types of types of types...
;;beancount         ; mind the GAAP
(cc               ; C > C++ == 1
 +lsp
 +tree-sitter)
;;clojure           ; java with a lisp
;;common-lisp       ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
(csharp           ; unity, .NET, and mono shenanigans
 +lsp
 +tree-sitter
 +unity)
data              ; config/data formats
;;(dart             ; paint ui and not much else
;; +flutter)
;;dhall
;;elixir            ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp        ; drown in parentheses
;;erlang            ; an elegant language for a more civilized age
;;ess               ; emacs speaks statistics
;;factor
;;faust             ; dsp, but you get to keep your soul
;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
;;(go               ; the hipster dialect
;; +lsp)
;;(haskell          ; a language that's lazier than I am
;; +lsp)
;;hy                ; readability of scheme w/ speed of python
;;idris             ; a language you can depend on
(json             ; At least it ain't XML
 +lsp
 +tree-sitter)
(java             ; the poster child for carpal tunnel syndrome
 +lsp
 +tree-sitter)
;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
;;julia             ; a better, faster MATLAB
;;kotlin            ; a better, slicker Java(Script)
(latex            ; writing papers in Emacs has never been so fun
 +lsp
 +latexmk
 +cdlatex
 +fold)
;;lean              ; for folks with too much to prove
;;ledger            ; be audit you can be
(lua              ; one-based indices? one-based indices
 +lsp)
(markdown         ; writing docs for people to ignore
 +grip)
;;nim               ; python + lisp at the speed of c
;;nix               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org +roam2       ; organize your plain life in plain text
     ;; +pretty
     +pandoc
     +present
     +dragndrop
     +gnuplot)
;;php               ; perl's insecure younger brother
;;plantuml          ; diagrams for confusing people more
;;purescript        ; javascript, but functional
(python           ; beautiful is better than ugly
 +lsp
 +tree-sitter
 +pyenv)
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
;;(ruby             ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
;; +rails)
;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
(scala            ; java, but good
 +lsp
 +tree-sitter)
;;(scheme           ; a fully conniving family of lisps
;; +guile)
(sh               ; she sells {ba,z,fi}sh shells on the C xor
 +lsp
 +tree-sitter
 +fish
 +powershell)
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
;;web               ; the tubes
yaml              ; JSON, but readable
;;zig               ; C, but simpler
#+end_src

**** Pacman packages
#+begin_src fundamental :noweb yes :noweb-ref pacman-packages
clang glslang
jdk-openjdk
pandoc
gnome-screenshot graphviz
<<pacman-packages-wl-clipboard()>>
python-black python-pyflakes python-isort python-pipenv python-nose python-pytest pyenv
shellcheck
#+end_src

#+name: pacman-packages-wl-clipboard
#+begin_src emacs-lisp :tangle no
(if (satan/current-display-server-p "Wayland") "wl-clipboard" "")
#+end_src

**** Aptitude packages
#+begin_src fundamental :noweb yes :noweb-ref apt-packages
clang-format glslang-tools
default-jdk
pandoc
gnome-screenshot graphviz
<<apt-packages-wl-clipboard()>>
shellcheck
#+end_src

#+name: apt-packages-wl-clipboard
#+begin_src emacs-lisp :tangle no
(if (satan/current-display-server-p "Wayland") "wl-clipboard" "")
#+end_src

*** Email
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:email
(:if (executable-find "mu")
 (mu4e
  +org
  +gmail))
;;notmuch
;;(wanderlust
;; +gmail)
#+end_src

**** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
mu isync msmtp
#+end_src

**** Aptitude packages
#+begin_src fundamental :noweb-ref apt-packages
mu4e isync msmtp
#+end_src

*** App
#+begin_src emacs-lisp :tangle no :noweb yes :noweb-ref doom-packages
:app
calendar
;;emms
;;irc                   ; how neckbeards socialize
(rss                  ; emacs as an RSS reader
 +org)
;;twitter               ; twitter client https://twitter.com/vnought
#+end_src

**** Emacs everywhere
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
(:if (satan/current-system-p "Linux")
 everywhere)          ; *leave* Emacs!? You must be joking
#+end_src

***** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
xorg-xwininfo xorg-xprop xdotool xclip
#+end_src

***** Aptitude packages
#+begin_src fundamental :noweb-ref apt-packages
x11-utils xdotool xclip
#+end_src

*** Config
#+begin_src emacs-lisp :tangle no :noweb-ref doom-packages
:config
literate
(default +bindings +smartparens)
#+end_src

** Convenience
*** Reverse-im
#+begin_src emacs-lisp
(quail-define-package
 "ukrainian-qwertivka" "UTF-8" "UK" t "Input method made for Ukrainian qwertivka layout" nil t t t t nil nil nil nil nil t)

(quail-define-rules
 ("!" ?!) ("@" ?@) ("#" ?\#) ("$" ?$) ("%" ?%) ("^" ?^) ("&" ?&) ("*" ?*) ("(" ?\() (")" ?\))
 ("1" ?1) ("2" ?2) ("3" ?3)  ("4" ?4) ("5" ?5) ("6" ?6) ("7" ?7) ("8" ?8) ("9" ?9)  ("0" ?0)

 ("Q" ?Ь) ("W" ?Щ) ("E" ?Е) ("R" ?Р) ("T" ?Т) ("Y" ?И) ("U" ?У) ("I" ?І) ("O" ?О) ("P" ?П)
 ("A" ?А) ("S" ?С) ("D" ?Д) ("F" ?Ф) ("G" ?Ж) ("H" ?Г) ("J" ?Й) ("K" ?К) ("L" ?Л) ("\"" ?\")
 ("Z" ?З) ("X" ?Х) ("C" ?Ц) ("V" ?В) ("B" ?Б) ("N" ?Н) ("M" ?М) ("<" ?<) (">" ?>) ("?" ??)

 ("q" ?ь) ("w" ?щ) ("e" ?е) ("r" ?р) ("t" ?т) ("y" ?и) ("u" ?у) ("i" ?і)  ("o" ?о)  ("p" ?п)
 ("a" ?а) ("s" ?с) ("d" ?д) ("f" ?ф) ("g" ?ж) ("h" ?г) ("j" ?й) ("k" ?к)  ("l" ?л)  ("'" ?\')
 ("z" ?з) ("x" ?х) ("c" ?ц) ("v" ?в) ("b" ?б) ("n" ?н) ("m" ?м) ("," ?\,) ("." ?\.) ("/" ?/)

 ("`" ?\`) (";" ?\;) ("-" ?-) ("=" ?=) ("[" ?\[) ("]" ?\]) ("\\" ?\\)
 ("~" ?~)  (":" ?:)  ("_" ?_) ("+" ?+) ("{" ?{)  ("}" ?})  ("|" ?\|))
#+end_src

#+begin_src emacs-lisp
(use-package! reverse-im
  :hook
  (after-init . reverse-im-mode)
  :custom
  (reverse-im-input-methods (pcase satan/profiles-keyboard-layout
                              ("default"    '("ukrainian-computer"))
                              ("moonlander" '("ukrainian-qwertivka")))))
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! reverse-im)
#+end_src

** Tools
*** Vterm
#+begin_src emacs-lisp
(after! vterm
  (setq! vterm-timer-delay 0.01))
#+end_src

*** Projectile
Keybindings.
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("p" . "project")
       :desc "Browse project"               "." #'+default/browse-project
       :desc "Browse other project"         ">" #'doom/browse-in-other-project
       :desc "Run cmd in project root"      "!" #'projectile-run-shell-command-in-root
       :desc "Async cmd in project root"    "&" #'projectile-run-async-shell-command-in-root
       :desc "Add new project"              "a" #'projectile-add-known-project
       :desc "Switch to project buffer"     "b" #'projectile-switch-to-buffer
       :desc "Compile in project"           "c" #'projectile-compile-project
       :desc "Repeat last command"          "C" #'projectile-repeat-last-command
       :desc "Remove known project"         "d" #'projectile-remove-known-project
       :desc "Discover projects in folder"  "D" #'+default/discover-projects
       :desc "Edit project .dir-locals"     "e" #'projectile-edit-dir-locals
       :desc "Find file in project"         "f" #'projectile-find-file
       :desc "Find file in other project"   "F" #'doom/find-file-in-other-project
       :desc "Configure project"            "g" #'projectile-configure-project
       :desc "Invalidate project cache"     "i" #'projectile-invalidate-cache
       :desc "Kill project buffers"         "k" #'projectile-kill-buffers
       :desc "Find other file"              "o" #'projectile-find-other-file
       :desc "Switch project"               "p" #'projectile-switch-project
       :desc "Find recent project files"    "r" #'projectile-recentf
       :desc "Run project"                  "R" #'projectile-run-project
       :desc "Save project files"           "s" #'projectile-save-project-buffers
       :desc "List project todos"           "t" #'magit-todos-list
       :desc "Test project"                 "T" #'projectile-test-project
       :desc "Pop up scratch buffer"        "x" #'doom/open-project-scratch-buffer
       :desc "Switch to scratch buffer"     "X" #'doom/switch-to-project-scratch-buffer
       (:when (and (featurep! :tools taskrunner)
                   (or (featurep! :completion ivy)
                       (featurep! :completion helm)))
        :desc "List project tasks"          "z" #'+taskrunner/project-tasks)))
#+end_src

Configuration.
#+begin_src emacs-lisp
(after! projectile
  (setq! projectile-find-dir-includes-top-level t)
  (setq! projectile-project-search-path '("~/Projects")))
#+end_src

*** Collaborative programming
**** Floobits
I have found this pair programming service (proprietary, unfortunately) and they have an emacs plugin. Neat! Let's make it work.

First, package setup and configuration.
#+begin_src emacs-lisp :tangle packages.el
(package! floobits)
#+end_src

#+begin_src emacs-lisp
(use-package! floobits
  :defer t)

(map! :leader
      (:prefix-map ("C-c" . "collaboration")
       :desc "Join workspace"        "j" #'floobits-join-workspace
       :desc "Leave workspace"       "l" #'floobits-leave-workspace
       :desc "Summon"                "s" #'floobits-summon
       :desc "Follow user"           "f" #'floobits-follow-user
       :desc "Follow toggle"         "F" #'floobits-follow-mode-toggle
       :desc "Clear highlights"      "h" #'floobits-clear-highlights
       :desc "Add to workspace"      "a" #'floobits-add-to-workspace
       :desc "Remove from workspace" "r" #'floobits-remove-from-workspace
       (:prefix-map ("w" . "workspace")
        :desc "Share private"        "s" #'floobits-share-dir-private
        :desc "Share public"         "S" #'floobits-share-dir-public
        :desc "Configure"            "c" #'floobits-workspace-settings
        :desc "Delete"               "k" #'floobits-delete-workspace)
       :desc "Browse"                "b" #'floobits-open-workspace-in-browser))
#+end_src

We also need a =.floorc.json= with credentials in our home dir.
#+begin_src json :tangle no
{
  "auth": {
    "floobits.com": {
      "username": "son-of-satan",
      "api_key": "<api-key>",
      "secret": "<secret>"
    }
  }
}
#+end_src

*** Checkers
**** Spelling
#+begin_src emacs-lisp
(setq! ispell-dictionary "english")
(setq! ispell-personal-dictionary (expand-file-name "dictionary" "~/.local/share/ispell/"))
#+end_src

*** Screenshot
This makes it a breeze to take lovely screenshots.
#+begin_src emacs-lisp :tangle packages.el
(package! screenshot :recipe (:host github :repo "tecosaur/screenshot" :build (:not compile)))
#+end_src

#+begin_src emacs-lisp
(use-package! screenshot
  :defer t)
#+end_src

*** Webpaste
#+begin_src emacs-lisp :tangle packages.el
(package! webpaste)
#+end_src

#+begin_src emacs-lisp
(use-package! webpaste
  :defer t)
#+end_src

** Visuals
*** Good scroll
#+begin_src emacs-lisp
(use-package! good-scroll
  :hook
  (after-init . good-scroll-mode))
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! good-scroll)
#+end_src

*** Mixed pitch
#+begin_src emacs-lisp
(add-hook! (org-mode LaTeX-mode markdown-mode gfm-mode Info-mode) #'mixed-pitch-mode)
#+end_src

** Questionable stuff
*** Elcord
I use Emacs btw (only if discord is installed).
#+begin_src emacs-lisp :tangle packages.el
(package! elcord :disable (not (executable-find "discord")))
#+end_src

#+begin_src emacs-lisp
(use-package! elcord
  :hook
  (after-init . elcord-mode)
  :commands elcord-mode
  :config
  (setq! elcord-quiet t)
  (setq! elcord-use-major-mode-as-main-icon t))
#+end_src

*** Selectric
So everyone (including myself) knows I'm typing.
#+begin_src emacs-lisp :tangle packages.el
(package! selectric-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! selectic-mode
  :commands selectic-mode)
#+end_src

**** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
alsa-utils
#+end_src

* Applications
** Emacs application framework
#+begin_src emacs-lisp :tangle no
(use-package! eaf
  :defer-incrementally t
  :custom
  (eaf-apps-to-install '(browser
                         pdf-viewer
                         org-previewer
                         markdown-previewer)))

(use-package! eaf-browser
  :defer-incrementally t
  :after eaf)

(use-package! eaf-mail
  :defer-incrementally t
  :after eaf
  :config
  (after! mu4e
    (map! :map mu4e-view-mode-map
          "o" 'eaf-open-mail-as-html)))

(use-package! eaf-pdf-viewer
  :defer-incrementally t
  :after eaf)

(use-package! eaf-org-previewer
  :defer-incrementally t
  :after eaf)

(use-package! eaf-markdown-previewer
  :defer-incrementally t
  :after eaf)
#+end_src

#+begin_src emacs-lisp :tangle no
(package! emacs-application-framework
  :recipe (:host github :repo "manateelazycat/emacs-application-framework" :files ("*")))
#+end_src

** Email
*** mu4e
#+begin_src emacs-lisp
(after! mu4e
  (setq! ; sendmail setup
         sendmail-program (executable-find "msmtp")
         send-mail-function #'smtpmail-send-it
         message-sendmail-f-is-evil t
         message-sendmail-extra-arguments '("--read-envelope-from")
         message-send-mail-function #'message-send-mail-with-sendmail
         ; getmail setup
         +mu4e-backend 'mbsync
         mu4e-get-mail-command "mbsync -a -c ~/.config/mbsync/config"
         ; misc
         mu4e-compose-signature-auto-include t
         mu4e-update-interval (* 5 60)
         mu4e-context-policy 'ask-if-none
         mu4e-compose-context-policy 'always-ask))
#+end_src

*** External config (defaults)
**** mbsync
#+begin_src conf :tangle (if (executable-find "mbsync") "~/.config/mbsync/config" "no")
SyncState *
Create Both
Expunge Both
#+end_src

**** msmtp
#+begin_src conf :tangle (if (executable-find "msmtp") "~/.config/msmtp/config" "no")
defaults
auth on
tls on
#+end_src

*** Accounts
**** mtataryn555@gmail.com
***** mu4e config
#+begin_src emacs-lisp
(after! mu4e
  (set-email-account! "p mtataryn555@gmail.com"
                      `((user-full-name     . "Mykola Tataryn")
                        (user-mail-address  . "mtataryn555@gmail.com")
                        (mu4e-sent-folder   . "/mtataryn555@gmail.com/Sent")
                        (mu4e-drafts-folder . "/mtataryn555@gmail.com/Drafts")
                        (mu4e-trash-folder  . "/mtataryn555@gmail.com/Trash")
                        (mu4e-refile-folder . "/mtataryn555@gmail.com/Archive")

                        (mu4e-maildir-shortcuts . ((:maildir "/mtataryn555@gmail.com/Inbox"   :key ?i)
                                                   (:maildir "/mtataryn555@gmail.com/Sent"    :key ?s)
                                                   (:maildir "/mtataryn555@gmail.com/Drafts"  :key ?d)
                                                   (:maildir "/mtataryn555@gmail.com/Trash"   :key ?t)
                                                   (:maildir "/mtataryn555@gmail.com/Archive" :key ?a)))

                        (mu4e-bookmarks . ((:name "[mtataryn555@gmail] Unread messages"
                                            :query "flag:unread AND NOT flag:trashed AND maildir:/mtataryn555@gmail.com/*"
                                            :key ?u)
                                           (:name "[mtataryn555@gmail] Today's messages"
                                            :query "date:today..now AND NOT flag:trashed AND maildir:/mtataryn555@gmail.com/*"
                                            :key ?t)
                                           (:name "[mtataryn555@gmail] Last 7 days"
                                            :query "date:7d..now AND NOT flag:trashed AND maildir:/mtataryn555@gmail.com/*"
                                            :key ?w :hide-unread t)
                                           (:name "[mtataryn555@gmail] Flagged messages"
                                            :query "flag:flagged AND maildir:/mtataryn555@gmail.com/*"
                                            :key ?f)
                                           (:name "Unread messages"
                                            :query "flag:unread AND NOT flag:trashed"
                                            :key ?U)
                                           (:name "Today's messages"
                                            :query "date:today..now AND NOT flag:trashed"
                                            :key ?T)
                                           (:name "Last 7 days"
                                            :query "date:7d..now AND NOT flag:trashed"
                                            :key ?W :hide-unread t)
                                           (:name "Flagged messages"
                                            :query "flag:flagged"
                                            :key ?F)))

                        (smtpmail-smtp-user       . "mtataryn555@gmail.com")
                        (+mu4e-personal-addresses . ("mtataryn555@gmail.com"))

                        (mu4e-compose-signature   . ,(concat "-----\n"
                                                             "Mykola Tataryn"))

                        (org-msg-signature        . ,(concat "-----\n"
                                                             "#+begin_signature\n"
                                                             "Mykola Tataryn\n"
                                                             "#+end_signature")))
                      t))
#+end_src

***** mbsync config
#+begin_src conf :tangle (if (executable-find "mbsync") "~/.config/mbsync/config" "no")
IMAPStore mtataryn555@gmail.com-remote
Host imap.gmail.com
SSLType IMAPS
AuthMechs LOGIN
User mtataryn555@gmail.com
PassCmd "secret-tool lookup application email account mtataryn555@gmail.com"

MaildirStore mtataryn555@gmail.com-local
Path ~/.mail/mtataryn555@gmail.com/
Inbox ~/.mail/mtataryn555@gmail.com/Inbox
Trash Trash
SubFolders Verbatim

Channel mtataryn555@gmail.com-inbox
Far :mtataryn555@gmail.com-remote:
Near :mtataryn555@gmail.com-local:

Channel mtataryn555@gmail.com-sent
Far :mtataryn555@gmail.com-remote:"[Gmail]/Sent Mail"
Near :mtataryn555@gmail.com-local:Sent

Channel mtataryn555@gmail.com-drafts
Far :mtataryn555@gmail.com-remote:[Gmail]/Drafts
Near :mtataryn555@gmail.com-local:Drafts

Channel mtataryn555@gmail.com-trash
Far :mtataryn555@gmail.com-remote:[Gmail]/Trash
Near :mtataryn555@gmail.com-local:Trash

Channel mtataryn555@gmail.com-archive
Far :mtataryn555@gmail.com-remote:Archive
Near :mtataryn555@gmail.com-local:Archive

Group mtataryn555@gmail.com
Channel mtataryn555@gmail.com-inbox
Channel mtataryn555@gmail.com-sent
Channel mtataryn555@gmail.com-drafts
Channel mtataryn555@gmail.com-trash
Channel mtataryn555@gmail.com-archive
#+end_src

***** msmtp config
#+begin_src conf :tangle (if (executable-find "msmtp") "~/.config/msmtp/config" "no")
account mtataryn555@gmail.com
host smtp.gmail.com
port 587
from mtataryn555@gmail.com
user mtataryn555@gmail.com
passwordeval "secret-tool lookup application email account mtataryn555@gmail.com"

account default : mtataryn555@gmail.com
#+end_src

**** mykola.tataryn@apriorit.com
***** mu4e config
#+begin_src emacs-lisp
(after! mu4e
  (set-email-account! "a mykola.tataryn@apriorit.com"
                      `((user-full-name     . "Mykola Tataryn")
                        (user-mail-address  . "mykola.tataryn@apriorit.com")
                        (mu4e-sent-folder   . "/mykola.tataryn@apriorit.com/Sent")
                        (mu4e-drafts-folder . "/mykola.tataryn@apriorit.com/Drafts")
                        (mu4e-trash-folder  . "/mykola.tataryn@apriorit.com/Trash")
                        (mu4e-refile-folder . "/mykola.tataryn@apriorit.com/Archive")

                        (mu4e-maildir-shortcuts . ((:maildir "/mykola.tataryn@apriorit.com/Inbox"   :key ?i)
                                                   (:maildir "/mykola.tataryn@apriorit.com/Sent"    :key ?s)
                                                   (:maildir "/mykola.tataryn@apriorit.com/Drafts"  :key ?d)
                                                   (:maildir "/mykola.tataryn@apriorit.com/Trash"   :key ?t)
                                                   (:maildir "/mykola.tataryn@apriorit.com/Archive" :key ?a)))

                        (mu4e-bookmarks . ((:name "[mykola.tataryn@apriorit.com] Unread messages"
                                            :query "flag:unread AND NOT flag:trashed AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?u)
                                           (:name "[mykola.tataryn@apriorit.com] Today's messages"
                                            :query "date:today..now AND NOT flag:trashed AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?t)
                                           (:name "[mykola.tataryn@apriorit.com] Last 7 days"
                                            :query "date:7d..now AND NOT flag:trashed AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?w :hide-unread t)
                                           (:name "[mykola.tataryn@apriorit.com] Flagged messages"
                                            :query "flag:flagged AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?f)
                                           (:name "[mykola.tataryn@apriorit.com] Varjo"
                                            :query "contact:varjo@apriorit.com OR subject:[varjo] AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?v)
                                           (:name "[mykola.tataryn@apriorit.com] Sotero"
                                            :query "contact:sotero@apriorit.com OR subject:[sotero] AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?s)
                                           (:name "[mykola.tataryn@apriorit.com] Jira"
                                            :query "subject:[jira] AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?j)
                                           (:name "[mykola.tataryn@apriorit.com] Confluence"
                                            :query "subject:[confluence] AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?c)
                                           (:name "Unread messages"
                                            :query "flag:unread AND NOT flag:trashed"
                                            :key ?U)
                                           (:name "Today's messages"
                                            :query "date:today..now AND NOT flag:trashed"
                                            :key ?T)
                                           (:name "Last 7 days"
                                            :query "date:7d..now AND NOT flag:trashed"
                                            :key ?W :hide-unread t)
                                           (:name "Flagged messages"
                                            :query "flag:flagged"
                                            :key ?F)))

                        (smtpmail-smtp-user       . "mykola.tataryn@apriorit.com")
                        (+mu4e-personal-addresses . ("mykola.tataryn@apriorit.com"))

                        (mu4e-compose-signature   . ,(concat "-----\n"
                                                             "Best regards,\n"
                                                             "Mykola Tataryn,\n"
                                                             "Software Developer of Apriorit - A Priority Choice!\n"
                                                             "Visit us at http://www.apriorit.com"))

                        (org-msg-signature        . ,(concat "-----\n"
                                                             "#+begin_signature\n"
                                                             "Best regards,\n\n"
                                                             "Mykola Tataryn,\n\n"
                                                             "Software Developer of Apriorit - A Priority Choice!\n\n"
                                                             "Visit us at [[https://apriorit.com]]\n"
                                                             "#+end_signature")))
                      t))
#+end_src

***** mbsync config
#+begin_src conf :tangle (if (executable-find "mbsync") "~/.config/mbsync/config" "no")
Host long.apriorit.com
Port 40993
User mykola.tataryn@apriorit.com
AuthMechs LOGIN
PassCmd "secret-tool lookup application email account mykola.tataryn@apriorit.com"
SSLType IMAPS

MaildirStore mykola.tataryn@apriorit.com-local
Path ~/.mail/mykola.tataryn@apriorit.com/
Inbox ~/.mail/mykola.tataryn@apriorit.com/Inbox
Trash Trash
SubFolders Verbatim

Channel mykola.tataryn@apriorit.com-inbox
Far :mykola.tataryn@apriorit.com-remote:
Near :mykola.tataryn@apriorit.com-local:
Sync Pull

Channel mykola.tataryn@apriorit.com-sent
Far :mykola.tataryn@apriorit.com-remote:Sent
Near :mykola.tataryn@apriorit.com-local:Sent
Sync Pull

Channel mykola.tataryn@apriorit.com-drafts
Far :mykola.tataryn@apriorit.com-remote:Drafts
Near :mykola.tataryn@apriorit.com-local:Drafts
Sync Pull

Channel mykola.tataryn@apriorit.com-trash
Far :mykola.tataryn@apriorit.com-remote:Trash
Near :mykola.tataryn@apriorit.com-local:Trash
Sync Pull

# Channel mykola.tataryn@apriorit.com-archive
# Far :mykola.tataryn@apriorit.com-remote:Archive
# Near :mykola.tataryn@apriorit.com-local:Archive
# Sync Pull

Group mykola.tataryn@apriorit.com
Channel mykola.tataryn@apriorit.com-inbox
Channel mykola.tataryn@apriorit.com-sent
Channel mykola.tataryn@apriorit.com-drafts
Channel mykola.tataryn@apriorit.com-trash
# Channel mykola.tataryn@apriorit.com-archive
#+end_src

***** msmtp config
#+begin_src conf :tangle (if (executable-find "msmtp") "~/.config/msmtp/config" "no")
account mykola.tataryn@apriorit.com
host long.apriorit.com
port 40465
from mykola.tataryn@apriorit.com
user mykola.tataryn@apriorit.com
passwordeval "secret-tool lookup application email account mykola.tataryn@apriorit.com"
#+end_src

* Language configuration
** Org
#+begin_src emacs-lisp
(after! org
  (setq! org-directory "~/Org/")
  (setq! org-roam-directory "~/Org/roam")
  (setq! org-agenda-files "~/Org/.agenda-files")
  (setq! org-cite-global-bibliography '("~/Org/.bib"))
  (setq! org-latex-compiler '"xelatex")
  (setq! org-agenda-weekend-days '(0))
  (setq! calendar-week-start-day 1)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))

(after! ox
  (add-to-list 'org-export-smart-quotes-alist
               '("uk"
                 (primary-opening :utf-8 "«" :html "&laquo;" :latex "{}<<" :texinfo "@guillemetleft{}")
                 (primary-closing :utf-8 "»" :html "&raquo;" :latex ">>{}" :texinfo "@guillemetright{}")
                 (secondary-opening :utf-8 "„" :html "&bdquo;" :latex "\\glqq{}" :texinfo "@quotedblbase{}")
                 (secondary-closing :utf-8 "“" :html "&ldquo;" :latex "\\grqq{}" :texinfo "@quotedblleft{}")
                 (apostrophe :utf-8 "’" :html: "&#39;"))))

(use-package! org-tempo
  :after org)
#+end_src

*** Behaviour
**** Key org roam nodes
#+begin_src emacs-lisp
(defun satan/org-roam-location (id)
  `(lambda () (car (org-roam-id-find ',id))))

(defvar
  satan/org-roam-tasks-node-id
  'ee595c48-5a64-44ef-bcb4-dbf2a01ab2e4)

(defvar
  satan/org-roam-archive-node-id
  '659a9caa-5498-48ac-95b0-02dce766d48f)

(defvar
  satan/org-roam-leisure-node-id
  'eff2874c-b6cb-4805-ac4c-4af835775458)

(defvar
  satan/org-roam-library-node-id
  '68ec962b-3173-41bb-bcb1-35abc7f58ef5)
#+end_src

**** Capture templates
#+begin_src emacs-lisp
(after! org
  (setq! org-capture-templates
         `(("t" "Task" entry
            (file ,(satan/org-roam-location satan/org-roam-tasks-node-id))
            "* TODO %? \n %i\n"
            :empty-lines 1)
           ("l" "Library")
           ("lb" "book" entry
            (file+olp ,(satan/org-roam-location satan/org-roam-library-node-id) "Inbox")
             "* UNREAD %? :book:\n %i\n"
             :empty-lines 1)
           ("L" "Leisure")
           ("Ln" "novel" entry
            (file+olp ,(satan/org-roam-location satan/org-roam-leisure-node-id) "Inbox")
            "* UNREAD %? :novel:\n %i\n"
            :empty-lines 1)
           ("Lf" "film" entry
            (file+olp ,(satan/org-roam-location satan/org-roam-leisure-node-id) "Inbox")
            "* UNWATCHED %? :film:\n %i\n"
            :empty-lines 1)
           ("Ls" "series" entry
            (file+olp ,(satan/org-roam-location satan/org-roam-leisure-node-id) "Inbox")
            "* UNWATCHED %? :series:\n %i\n"
            :empty-lines 1)
           ("Lg" "game" entry
            (file+olp ,(satan/org-roam-location satan/org-roam-leisure-node-id) "Inbox")
            "* UNPLAYED %? :game:\n %i\n"
            :empty-lines 1)
           ("Lm" "manga" entry
            (file+olp ,(satan/org-roam-location satan/org-roam-leisure-node-id) "Inbox")
            "* UNREAD %? :manga:\n %i\n"
            :empty-lines 1)
           ("La" "anime" entry
            (file+olp ,(satan/org-roam-location satan/org-roam-leisure-node-id) "Inbox")
            "* UNWATCHED %? :anime:\n %i\n"
            :empty-lines 1))))

(after! org-roam
  (setq! org-roam-capture-templates
         `(("d" "Default" plain "%?"
            :target
            (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
            :unnarrowed t)
           ("g" "Game" plain "%?"
            :target
            (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: :games:${title}:")
            :unnarrowed t))))
#+end_src

**** Auto tangle mode
#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :hook
  (org-mode . org-auto-tangle-mode))
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! org-auto-tangle)
#+end_src

**** Alerts
#+begin_src emacs-lisp :tangle packages.el
(package! org-alert)
#+end_src

#+begin_src emacs-lisp
(use-package! org-alert
  :hook
  (after-init . org-alert-enable))
#+end_src

**** Graphviz
Org supports drawing graphs with [[https://graphviz.org/][graphviz]], though there is no built-in major mode for DOT. Fortunately, [[https://github.com/ppareit/graphviz-dot-mode][this]] package provides what we need.
#+begin_src emacs-lisp :tangle packages.el
(package! graphviz-dot-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! graphviz-dot-mode)
#+end_src

**** PlantUML
Graphviz is nice, but drawing UML diagrams with it is painful.
#+begin_src emacs-lisp
(after! ob-plantuml
  (setq! org-plantuml-exec-mode 'plantuml))
#+end_src

***** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
plantuml
#+end_src

****  Attachments
#+begin_src emacs-lisp
(after! org-attach
  (setq! org-attach-id-dir "~/Org/.attach/"))
#+end_src

*** Visuals
**** Org Modern
#+begin_src emacs-lisp :tangle packages.el
(package! org-modern)
#+end_src

#+begin_src emacs-lisp
(use-package! org-modern
  :hook (org-mode . org-modern-mode)
  :config
  (setq! org-modern-star ["◉" "○" "◈" "◇"]
         org-modern-list '((?* . "•") (?+ . "➤") (?- . "–"))
         org-modern-hide-stars nil
         org-modern-table nil))
#+end_src

*** Exporting
Make org recognize first /five/ levels of headings as headings when exporting
#+begin_src emacs-lisp
(setq! org-export-headline-levels 5)
#+end_src

*** Engraving faces
#+begin_src emacs-lisp :tangle packages.el
(package! engrave-faces)
#+end_src

#+begin_src emacs-lisp
(after! ox-latex
  (use-package! engrave-faces)
  (setq! org-latex-src-block-backend 'engraved)
  (setq! org-latex-engraved-theme 'default))
#+end_src

*** Latex export
**** System dependencies
***** Pacman packages
#+begin_src fundamental :noweb-ref pacman-packages
texlive-core
texlive-latexextra
texlive-fontsextra
texlive-langcyrillic
texlive-pictures
#+end_src

***** Aptitude packages
#+begin_src fundamental :noweb-ref apt-packages
texlive-full
#+end_src

**** Compiling
Org uses =latexmk= with =pdflatex= as compiler by default, and =pdflatex= doesn't support =utf-8=. So let's use =xelatex= instead.
#+begin_src emacs-lisp
(after! org
  (setq! org-latex-compiler '"xelatex"))
#+end_src

**** Class templates
#+begin_src emacs-lisp
(after! org
  (setq! org-latex-classes
         '(("article" "\\documentclass{scrartcl}"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
            ("\\paragraph{%s}" . "\\paragraph*{%s}")
            ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))

           ("report" "\\documentclass{scrreprt}"
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))

           ("split-report" "\\documentclass{scrreprt}"
            ("\\part{%s}" . "\\part*{%s}")
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))

           ("book" "\\documentclass{scrbook}"
            ("\\part{%s}" . "\\part*{%s}")
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))
#+end_src

**** Modular preamble generation
Inspired by [[https://tecosaur.github.io/emacs-config/config.html#cleverer-preamble][this]].

***** Keywords/Options
#+begin_src emacs-lisp
(defun org-latex-mp--register-option (name keyword option default behavior)
  (after! ox
    (add-to-list 'org-export-options-alist
                 (list name keyword option default behavior))))

(defun org-latex-mp--register-options (&rest args)
  (dolist (option args)
    (apply #'org-latex-mp--register-option option)))
#+end_src

***** Requires
#+begin_src emacs-lisp
(require 'map)
#+end_src

***** Order
#+begin_src emacs-lisp
(defvar org-latex-mp--orders-alist
  '((typography . 0)
    (typography-fonts . 0)
    (typography-microtype . 0.1)
    (typography-math . 0.2)
    (typography-math-fonts . 0.3)
    (typography-acr . 0.4)
    (typography-misc . 0.5)
    (default . 1)
    (content . 2)
    (misc . 3)))

(defvar org-latex-mp--default-order 'default)

(defun org-latex-mp--get-order (name)
  (map-elt org-latex-mp--orders-alist name 1))
#+end_src

***** Triggers
#+begin_src emacs-lisp
(defvar org-latex-mp--feature-triggers-alist nil)

(defun org-latex-mp--register-trigger (trigger &rest rest)
  (map-put org-latex-mp--feature-triggers-alist
           trigger (delete-dups
                    (append rest (map-elt org-latex-mp--feature-triggers-alist trigger)))))
#+end_src

***** Styles
#+begin_src emacs-lisp
(defvar org-latex-mp--styles-alist nil)

(defvar org-latex-mp--default-style 'default)

(defun org-latex-mp--get-style (style)
  (map-elt org-latex-mp--styles-alist style))
#+end_src

***** Features
#+begin_src emacs-lisp
(defun org-latex-mp--get-feature (name &rest rest)
  (let ((style (or (plist-get rest :style) org-latex-mp--default-style)))
    (or (map-elt (org-latex-mp--get-style style)
                 name)
        (map-elt (org-latex-mp--get-style org-latex-mp--default-style)
                 name))))

(defun org-latex-mp--register-feature (name &rest rest)
  (let ((style    (or (plist-get rest :style)    org-latex-mp--default-style))
        (snippet  (or (plist-get rest :snippet)  nil))
        (order    (or (plist-get rest :order)    org-latex-mp--default-order))
        (requires (or (plist-get rest :requires) nil))
        (eager    (or (plist-get rest :eager)    nil)))
    (let ((features (map-elt org-latex-mp--styles-alist style)))
      (map-put features
               name `(:snippet ,snippet :order ,order :requires ,requires :eager ,eager))
      (map-put org-latex-mp--styles-alist
               style features))))

(defun org-latex-mp--register-features (&rest args)
  (dolist (module args)
    (apply #'org-latex-mp--register-feature module)))
#+end_src

***** Feature detection
#+begin_src emacs-lisp
(org-latex-mp--register-option
 :latex-features "LATEX_FEATURES" nil nil 'split)

(defun org-latex-mp--feature-detected-p (trigger)
  (save-excursion
    (goto-char (point-min))
    (re-search-forward trigger nil t)))

(defun org-latex-mp--detect-features (&optional buffer)
  "List features from `org-latex-mp--triggers-alist' detected in BUFFER."
  (let ((case-fold-search nil))
    (with-current-buffer (or buffer (current-buffer))
      (delete-dups
       (mapcan
        (lambda (pair)
          (let ((trigger (car pair))
                (feature (cdr pair)))
            (when (org-latex-mp--feature-detected-p trigger)
              (-list feature))))
        org-latex-mp--feature-triggers-alist)))))
#+end_src

***** Style detection
#+begin_src emacs-lisp
(org-latex-mp--register-option
 :style nil "style" 'org-latex-mp--default-style nil)
#+end_src

***** Feature processing
#+begin_src emacs-lisp
(defun org-latex-mp--collect-requires (names style)
  (let ((result nil))
    (while names
      (setq result (append names
                           (cl-set-difference
                            (-list (plist-get (org-latex-mp--get-feature (car names) :style style) :requires))
                            result)))
      (push (pop names) result))))

(defun org-latex-mp--collect-eager-features (names style)
  (reverse
   (delete-dups
    (mapcan
     (lambda (pair)
       (let ((name    (car pair))
             (feature (cdr pair)))
         (let ((eager (plist-get feature :eager)))
           (if (pcase eager
                 ((pred booleanp) eager))
               (list name)))))
     (append (org-latex-mp--get-style 'default)
             (org-latex-mp--get-style style))))))

(defun org-latex-mp--sort-features (names style)
  (sort names
        (lambda (left right)
          (< (org-latex-mp--get-order
              (plist-get (org-latex-mp--get-feature left :style style) :order))
             (org-latex-mp--get-order
              (plist-get (org-latex-mp--get-feature right :style style) :order))))))

(defun org-latex-mp--expand-features (feature-names style)
  (setq feature-names
        (append feature-names
                (org-latex-mp--collect-requires feature-names style)))
  (setq feature-names
        (append feature-names
                (org-latex-mp--collect-eager-features feature-names style)))
  (setq feature-names
        (append feature-names
                (org-latex-mp--collect-requires feature-names style)))
  (org-latex-mp--sort-features (delete-dups feature-names) style))
#+end_src

***** Preamble generation
#+begin_src emacs-lisp
(defun org-latex-mp--expand-snippet (info snippet)
  (pcase snippet
    ((pred functionp) (funcall snippet info))
    ((pred stringp) snippet)))

(defun org-latex-mp--generate-preamble (info)
  (let* ((style (plist-get info :style))
         (feature-names (org-latex-mp--expand-features
                         (append (org-latex-mp--detect-features)
                                 (-map (lambda (str) (intern str))
                                       (plist-get info :latex-features)))
                         style)))
    (concat
     (format "\n%% style: %s\n%% features: %s\n" style feature-names)
     (mapconcat (lambda (feature-name)
                  (when-let ((feature (org-latex-mp--get-feature feature-name :style style)))
                    (when-let ((snippet (plist-get feature :snippet)))
                      (org-latex-mp--expand-snippet info snippet))))
                feature-names "\n")
     "\n% end features\n")))
#+end_src

***** Advicing
#+begin_src emacs-lisp
(defvar org-latex-mp--tmp-info nil)

(defadvice! org-latex-mp--make-preamble-advice (info &optional template snippet?)
  :before #'org-latex-make-preamble
  (setq org-latex-mp--tmp-info info))

(defadvice! org-latex-mp--splice-latex-header-advice (orig-fn tpl def-pkg pkg snippets-p &optional extra)
  "Dynamically insert preamble content based on `org-latex-conditional-preambles'."
  :around #'org-splice-latex-header
  (let ((header (funcall orig-fn tpl def-pkg pkg snippets-p extra)))
    (if snippets-p
        header
      (concat
       header
       (org-latex-mp--generate-preamble org-latex-mp--tmp-info)
       "\n"))))
#+end_src

**** Default latex packages
#+begin_src emacs-lisp
(after! ox-latex
  (setq! org-latex-default-packages-alist
         '(("AUTO"     "inputenc"     t ("pdflatex"))
           ("T1"       "fontenc"      t ("pdflatex"))
           (""         "fontspec"     t ("xelatex"))
           ("AUTO"     "babel"        t ("pdflatex" "xelatex"))
           (""         "biblatex"     nil)
           (""         "tikz"         t)
           (""         "graphicx"     t)
           (""         "longtable"    nil)
           (""         "wrapfig"      nil)
           (""         "rotating"     nil)
           ("normalem" "ulem"         t)
           (""         "amsmath"      t)
           (""         "amssymb"      t)
           (""         "unicode-math" t ("xelatex"))
           (""         "capt-of"      nil)
           (""         "hyperref"     nil))))
#+end_src

**** Default style
***** Fonts
#+begin_src emacs-lisp
(org-latex-mp--register-features
 '(font-main
   :snippet "\\setmainfont{IBM Plex Serif}"
   :order typography-fonts
   :eager t)
 '(font-sans
   :snippet "\\setsansfont{IBM Plex Sans}"
   :order typography-fonts
   :eager t)
 '(font-mono
   :snippet "\\setmonofont{IBM Plex Mono}"
   :order typography-fonts
   :eager t)
 '(font-math
   :snippet "\\setmathfont{XITS Math}"
   :order typography-fonts
   :eager t))
#+end_src

***** Spacing
#+begin_src emacs-lisp
(org-latex-mp--register-features
 '(parsizes
   :snippet "\\setparsizes{0pt}{0.5\\baselineskip}{0pt plus 1fil}"
   :order typography-misc
   :eager t))
#+end_src

**** DSTU style
***** Fonts
#+begin_src emacs-lisp
(org-latex-mp--register-features
 '(font-main
   :style dstu
   :snippet "\\setmainfont{Times New Roman}"
   :order typography-fonts
   :eager t)
 '(font-sans
   :style dstu
   :snippet "\\setsansfont{Times New Roman}"
   :order typography-fonts
   :eager t)
 '(font-math
   :style dstu
   :snippet "\\setmathfont{XITS Math}"
   :order typography-fonts
   :eager t))
 #+end_src

***** Font size
#+begin_src emacs-lisp
(org-latex-mp--register-features
 '(font-size
   :style dstu
   :snippet "\\KOMAoptions{fontsize=14pt}"
   :order typography-fonts
   :eager t))
#+end_src

***** Spacing
#+begin_src emacs-lisp
(org-latex-mp--register-features
 '(parindent
   :style dstu
   :snippet "\\setlength{\\parindent}{5ex}"
   :order typography-misc
   :eager t)
 '(parskip
   :style dstu
   :snippet "\\setlength{\\parskip}{0pt}"
   :order typography-misc
   :eager t)
 '(linespread
   :style dstu
   :snippet "\\usepackage[onehalfspacing]{setspace}"
   :order typography-misc
   :eager t))
#+end_src

***** Margins
#+begin_src emacs-lisp
(org-latex-mp--register-features
 '(geometry
   :style dstu
   :snippet "\\usepackage[top=20mm,bottom=20mm,left=25mm,right=10mm]{geometry}"
   :order typography
   :eager t))
#+end_src

***** Sections
#+name: chapter-style
#+begin_src latex
\\KOMAoptions{chapterprefix=true,appendixprefix=true,numbers=endperiod}

\\RedeclareSectionCommand[
beforeskip=1em,
afterskip=1em,
afterindent=true,
]{chapter}

\\addtokomafont{chapterprefix}{\\normalfont\\normalsize\\bfseries\\MakeUppercase}
\\addtokomafont{chapter}{\\normalfont\\normalsize\\bfseries\\MakeUppercase}
\\renewcommand*{\\chapterheadmidvskip}{~}
\\renewcommand*{\\raggedchapter}{\\centering}
#+end_src

#+name: section-style
#+begin_src latex
\\RedeclareSectionCommand[
indent=5ex,
beforeskip=1em,
afterskip=1sp,
afterindent=true,
]{section}

\\addtokomafont{section}{\\normalfont\\normalsize\\bfseries}
\\addtokomafont{subsection}{\\normalfont\\normalsize\\bfseries}
\\renewcommand*{\\sectionformat}{\\thesection\\enskip}
\\renewcommand*{\\subsectionformat}{\\thesubsection\\enskip}
#+end_src

#+begin_src emacs-lisp :noweb yes
(org-latex-mp--register-features
 '(chapter-style
   :style dstu
   :snippet "
<<chapter-style>>
"
   :order default
   :eager t)
 '(section-style
   :style dstu
   :snippet "
<<section-style>>
"
   :order default
   :eager t))
#+end_src

***** Captions
#+name: caption-style
#+begin_src latex
\\usepackage{float, scrhack}
\\floatstyle{komaabove}
\\restylefloat{table}

\\renewcommand*{\\captionformat}{~--~}
#+end_src

#+begin_src emacs-lisp :noweb yes
(org-latex-mp--register-features
 '(caption-style
   :style dstu
   :snippet "
<<caption-style>>
"
   :order default
   :eager t))
#+end_src

***** Page numbers
#+name: page-number-style
#+begin_src latex
\\usepackage{scrlayer-scrpage}
\\cfoot[]{}
\\ohead[\\pagemark]{\\pagemark}
#+end_src

#+begin_src emacs-lisp :noweb yes
(org-latex-mp--register-features
 '(page-number-style
   :style dstu
   :snippet "
<<page-number-style>>
"
   :order default
   :eager t))
#+end_src

***** TOC
#+name: toc-style
#+begin_src latex
\\KOMAoptions{chapterentrydots=true}
% \\KOMAoptions{sectionentrydots=true}

\\DeclareTOCStyleEntry[
beforeskip=0em,
]{section}{chapter}

\\DeclareTOCStyleEntry[
beforeskip=0em,
]{section}{section}

\\addtokomafont{chapterentry}{\\normalsize\\mdseries}
\\addtokomafont{chapterentrydots}{\\normalsize}
\\addtokomafont{chapterentrypagenumber}{\\normalsize}
#+end_src

#+begin_src emacs-lisp :noweb yes
(org-latex-mp--register-features
 '(toc-style
   :style dstu
   :snippet "
<<toc-style>>
"
   :order default
   :eager t))
#+end_src

**** Title pages
***** Additional title fields
#+begin_src emacs-lisp
(after! ox-latex
  (setq! org-latex-subtitle-separate t)
  (setq! org-latex-subtitle-format "\\subtitle{%s}"))

(org-latex-mp--register-options
 '(:subject            "SUBJECT"            nil "" nil)
 '(:author-position    "AUTHOR_POSITION"    nil "" nil)
 '(:author-record      "AUTHOR_RECORD"      nil "" nil)
 '(:principal          "PRINCIPAL"          nil "" nil)
 '(:principal-position "PRINCIPAL_POSITION" nil "" nil)
 '(:committee-member-1 "COMMITTEE_MEMBER_1" nil "" nil)
 '(:committee-member-2 "COMMITTEE_MEMBER_2" nil "" nil))
#+end_src

***** KPI-related documents
****** Laboratory reports
#+name: kpi-lab-report-title-page
#+begin_src latex
\\usepackage{multicol}
\\usepackage{titling}

\\makeatletter
\\renewcommand{\\maketitle}{%%
  \\begin{titlepage}
    \\centering
      \\uppercase{Національний технічний університет України} \\\\
      «Київський політехнічний інститут імені Ігоря Сікорського» \\\\
      Факультет інформатики та обчислювальної техніки \\\\
      Кафедра інформатики та програмної інженерії \\\\
    \\par

    \\vspace{5cm}

    \\centering
    \\@title \\\\
    \\@subtitle \\\\
    З дисципліни «%s» \\\\ %% subject
    \\par

    \\vspace{5cm}

    \\begin{multicols}{2}
      \\raggedright
      \\textbf{Прийняв:} \\\\
      %s \\\\ %% principal-position
      %s \\\\ %% principal
      \\newcolumn
      \\textbf{Виконав:} \\\\
      %s \\\\ %% author-position
      \\@author \\\\
      \\par
    \\end{multicols}

    \\vfill
    \\centering
    \\textbf{Київ -- \\the\\year}
    \\par
  \\end{titlepage}
}
\\makeatother
#+end_src

#+begin_src emacs-lisp :noweb yes
(org-latex-mp--register-features
 '(kpi-lab-report-title-page
   :snippet (lambda (info)
              (format "
<<kpi-lab-report-title-page>>
"
                      (plist-get info :subject)
                      (plist-get info :principal-position)
                      (plist-get info :principal)
                      (plist-get info :author-position)))))
#+end_src

****** Term papers
#+name: kpi-term-paper-title-page
#+begin_src latex
\\usepackage{multicol}
\\usepackage{titling}

\\makeatletter
\\renewcommand{\\maketitle}{%%
  \\begin{titlepage}
    \\centering
      \\uppercase{Міністерство освіти і науки України} \\\\
      \\uppercase{Національний технічний університет України} \\\\
      «Київський політехнічний інститут імені Ігоря Сікорського» \\\\
      \\uppercase{Факультет інформатики та обчислювальної техніки} \\\\
      \\uppercase{Кафедра інформатики та програмної інженерії} \\\\
    \\par

    \\vspace{6em}

    \\centering
    \\@title \\\\
    З дисципліни «%s» \\\\ %% subject
    Тема: \\@subtitle \\\\
    \\par

    \\vspace{6em}

    \\setlength{\\columnsep}{1cm}
    \\begin{multicols}{2}
      \\raggedright
      \\textbf{Керівник:} \\\\
      %s \\\\ %% principal-position
      %s \\\\ %% principal
      «Допущено до захисту» \\\\
      \\underline{\\hspace{10em}} \\\\
      «\\underline{\\hspace{1.25em}}» \\underline{\\hspace{4em}} \\the\\year р. \\\\
      Захищено з оцінкою \\\\
      \\underline{\\hspace{10em}} \\\\
      Члени комісії: \\\\
      \\underline{\\hspace{10em}} \\\\
      \\underline{\\hspace{10em}} \\\\
      \\newcolumn
      \\textbf{Виконавець:} \\\\
      %s \\\\ %% author-position
      \\@author \\\\
      Залікова книжка №%s \\\\ %% author-record
      \\underline{\\hspace{10em}} \\\\
      \\@date \\\\
      \\vfill
      %s \\\\ %% committee-member-1
      %s \\\\ %% committee-member-2
      \\par
    \\end{multicols}

    \\vfill
    \\centering
      \\textbf{Київ -- \\the\\year}
    \\par
  \\end{titlepage}
}
\\makeatother
#+end_src

#+begin_src emacs-lisp :noweb yes
(org-latex-mp--register-features
 '(kpi-term-paper-title-page
   :snippet (lambda (info)
              (format "
<<kpi-term-paper-title-page>>
"
                      (plist-get info :subject)
                      (plist-get info :principal-position)
                      (plist-get info :principal)
                      (plist-get info :author-position)
                      (plist-get info :author-record)
                      (plist-get info :committee-member-1)
                      (plist-get info :committee-member-2)))))
#+end_src

***** LPNU-related documents
****** Laboratory reports
#+name: lpnu-lab-report-title-page
#+begin_src latex
\\usepackage{multicol}
\\usepackage{titling}

\\makeatletter
\\renewcommand{\\maketitle}{%%
  \\begin{titlepage}
    \\centering
      \\uppercase{Міністерство освіти і науки України} \\\\
      \\uppercase{Національний університет «Львівська Політехніка»} \\\\
      \\uppercase{Інститут комп'ютерних наук та інформаційних технологій} \\\\
      Кафедра систем штучного інтелекту \\\\
    \\par

    \\vspace{5cm}

    \\centering
    \\@title \\\\
    \\@subtitle \\\\
    З курсу «%s» \\\\ %% subject
    \\par

    \\vspace{5cm}

    \\begin{multicols}{2}
      \\raggedright
      \\textbf{Прийняв:} \\\\
      %s \\\\ %% principal-position
      %s \\\\ %% principal
      \\newcolumn
      \\textbf{Виконав:} \\\\
      %s \\\\ %% author-position
      \\@author \\\\
      \\par
    \\end{multicols}

    \\vfill
    \\centering
    \\textbf{Київ -- \\the\\year}
    \\par
  \\end{titlepage}
}
\\makeatother
#+end_src

#+begin_src emacs-lisp :noweb yes
(org-latex-mp--register-features
 '(lpnu-lab-report-title-page
   :snippet (lambda (info)
              (format "
<<lpnu-lab-report-title-page>>
"
                      (plist-get info :subject)
                      (plist-get info :principal-position)
                      (plist-get info :principal)
                      (plist-get info :author-position)))))
#+end_src

**** Hyperref setup
#+name: hyperref
#+begin_src latex
\\providecolor{url}{HTML}{0077bb}
\\providecolor{link}{HTML}{882255}
\\providecolor{cite}{HTML}{999933}
\\hypersetup{
  pdfauthor={%a},
  pdftitle={%t},
  pdfkeywords={%k},
  pdfsubject={%d},
  pdfcreator={%c},
  pdflang={%L},
  breaklinks=true,
  colorlinks=true,
  linkcolor=link,
  urlcolor=url,
  citecolor=cite\n}
\\urlstyle{same}
%% hide links styles in toc
\\NewCommandCopy{\\oldtoc}{\\tableofcontents}
\\renewcommand{\\tableofcontents}{\\begingroup\\hypersetup{hidelinks}\\oldtoc\\endgroup}
#+end_src

#+begin_src emacs-lisp :noweb yes
(after! ox-latex
  (setq! org-latex-hyperref-template "
<<hyperref>>
"))
#+end_src

*** HTML export
**** Mathjax
#+begin_src emacs-lisp
(after! org
  (setq! org-html-mathjax-options
         '((path "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js" )
           (scale "1")
           (autonumber "ams")
           (multlinewidth "85%")
           (tagindent ".8em")
           (tagside "right"))))
#+end_src

*** Reveal export
#+begin_src emacs-lisp
(after! org
  (setq! org-re-reveal-theme "night"
         org-re-reveal-transition "slide"
         org-re-reveal-plugins '(markdown notes math search zoom)
         org-re-reveal-width (display-pixel-width)
         org-re-reveal-height (display-pixel-height)))
#+end_src

*** Confluence
#+begin_src emacs-lisp :tangle packages.el
(package! ox-confluence :recipe (:host github :repo "nan0scho1ar/ox-confluence-modern" :files ("*.el")))
#+end_src

#+begin_src emacs-lisp
(use-package! ox-confluence)
#+end_src

** NASM
#+begin_src emacs-lisp :tangle packages.el
(package! nasm-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! nasm-mode
  :mode "\\.asm\\'")
#+end_src

** Systemd
For editing systemd unit files
#+begin_src emacs-lisp :tangle packages.el
(package! systemd :pin "b6ae63a236605b1c5e1069f7d3afe06ae32a7bae")
#+end_src

#+begin_src emacs-lisp
(use-package! systemd
  :defer t)
#+end_src

** Csharp
#+begin_src emacs-lisp
(after! csharp
  (setq! lsp-csharp-server-path "/usr/bin/omnisharp"))
#+end_src
