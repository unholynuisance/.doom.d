#+property: header-args :mkdirp yes

* General configuration
** Keybindings
*** Doom leader keys:
#+begin_src emacs-lisp
(setq doom-leader-alt-key "C-SPC")
(setq doom-localleader-alt-key "C-SPC l")
#+end_src

*** Rebind set-mark-command
#+begin_src emacs-lisp
(map! :leader :desc "Mark" "C-SPC"#'set-mark-command)
#+end_src

** UI
*** Transparency
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha . (98 . 98)))
#+end_src

*** Fonts
#+begin_src emacs-lisp
(setq! doom-font (font-spec :family "Fira Code" :size 16)
       doom-big-font (font-spec :family "Fira Code" :size 24)
       doom-variable-pitch-font (font-spec :family "Julia Mono")
       doom-unicode-font (font-spec :family "Julia Mono"))
#+end_src

*** Line numbers
It's convenient when you can see distance between current line and the line you want to jump to, isn't it?
#+begin_src emacs-lisp
(setq! display-line-numbers-type 'visual)
#+end_src

*** Theme
#+begin_src emacs-lisp
(setq! doom-theme 'doom-vibrant)
#+end_src

*** Dashboard
Menu sections:
#+begin_src emacs-lisp
(setq +doom-dashboard-menu-sections
      '(("Reload last session"
         :icon (all-the-icons-octicon "history" :face 'doom-dashboard-menu-title)
         :when (cond ((featurep! :ui workspaces)
                      (file-exists-p (expand-file-name persp-auto-save-fname persp-save-dir)))
                     ((require 'desktop nil t)
                      (file-exists-p (desktop-full-file-name))))
         :face (:inherit (doom-dashboard-menu-title bold))
         :action doom/quickload-session)
        ("Open org-agenda"
         :icon (all-the-icons-octicon "calendar" :face 'doom-dashboard-menu-title)
         :when (fboundp 'org-agenda)
         :action org-agenda)
        ("Recently opened files"
         :icon (all-the-icons-octicon "file-text" :face 'doom-dashboard-menu-title)
         :action recentf-open-files)
        ("Open project"
         :icon (all-the-icons-octicon "briefcase" :face 'doom-dashboard-menu-title)
         :action projectile-switch-project)
        ("Jump to bookmark"
         :icon (all-the-icons-octicon "bookmark" :face 'doom-dashboard-menu-title)
         :action bookmark-jump)
        ("Open private configuration"
         :icon (all-the-icons-octicon "tools" :face 'doom-dashboard-menu-title)
         :when (file-directory-p doom-private-dir)
         :action doom/open-private-config)))
#+end_src

Banner:
#+begin_src emacs-lisp
(setq fancy-splash-image (concat (file-name-as-directory doom-private-dir) "pictures/kurisu.png"))
#+end_src

*** Doom quit
#+begin_src emacs-lisp
(setq +doom-quit-messages '("It's not like I'll miss you or anything, b-baka!"))
#+end_src

** Other
*** Preferred encoding
Just in case.
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
#+end_src

* Packages
** Convenience
*** Reverse im
#+begin_src emacs-lisp
(use-package! reverse-im
  :hook
  (after-init . reverse-im-mode)
  :custom
  (reverse-im-input-methods '("russian-computer" "ukrainian-computer")))
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! reverse-im)
#+end_src

** Tools
*** Projectile
Keybindings.
#+begin_src emacs-lisp :tangle no
(map! :leader
      "p" 'projectile-command-map)
#+end_src

Make ~projectile-find-dir~ include top level directory.
#+begin_src emacs-lisp
(after! projectile
  (setq! projectile-find-dir-includes-top-level t))
#+end_src

*** Collaborative programming
**** Floobits
I have found this pair programming service (proprietary, unfortunately) and they have an emacs plugin. Neat! Let's make it work.

First, package setup and configuration.
#+begin_src emacs-lisp :tangle packages.el
(package! floobits)
#+end_src

#+begin_src emacs-lisp
(use-package! floobits
  :defer t)

(map! :leader
      (:prefix-map ("C-c" . "collaboration")
       :desc "Join workspace"        "j" #'floobits-join-workspace
       :desc "Leave workspace"       "l" #'floobits-leave-workspace
       :desc "Summon"                "s" #'floobits-summon
       :desc "Follow user"           "f" #'floobits-follow-user
       :desc "Follow toggle"         "F" #'floobits-follow-mode-toggle
       :desc "Clear highlights"      "h" #'floobits-clear-highlights
       :desc "Add to workspace"      "a" #'floobits-add-to-workspace
       :desc "Remove from workspace" "r" #'floobits-remove-from-workspace
       (:prefix-map ("w" . "workspace")
        :desc "Share private"        "s" #'floobits-share-dir-private
        :desc "Share public"         "S" #'floobits-share-dir-public
        :desc "Configure"            "c" #'floobits-workspace-settings
        :desc "Delete"               "k" #'floobits-delete-workspace)
       :desc "Browse"                "b" #'floobits-open-workspace-in-browser))
#+end_src

We also need a =.floorc.json= with credentials in our home dir.
#+begin_src json :tangle ~/.floorc.json
{
  "auth": {
    "floobits.com": {
      "username": "son-of-satan",
      "api_key": "user_6q950st0qn",
      "secret": "pfengudkiveq5yvsjbet3g7xr"
    }
  }
}
#+end_src

** Visuals
*** Good scroll
#+begin_src emacs-lisp
(use-package! good-scroll
  :hook
  (after-init . good-scroll-mode))
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! good-scroll)
#+end_src

*** Mixed pitch
#+begin_src emacs-lisp
(add-hook! (org-mode LaTeX-mode markdown-mode gfm-mode Info-mode) #'mixed-pitch-mode)
#+end_src

** Questionable stuff
*** Elcord
I use emacs btw (only if discord is installed).
#+begin_src emacs-lisp :tangle (if (executable-find "discord") "packages.el" "no")
(package! elcord)
#+end_src

#+begin_src emacs-lisp
(use-package! elcord
  :hook
  (after-init . elcord-mode)
  :commands elcord-mode
  :config
  (setq! elcord-quiet t)
  (setq! elcord-use-major-mode-as-main-icon t))
#+end_src

* Applications
** Emacs application framework
#+begin_src emacs-lisp :tangle no
(use-package! eaf
  :defer-incrementally t
  :custom
  (eaf-apps-to-install '(browser
                         pdf-viewer
                         org-previewer
                         markdown-previewer)))

(use-package! eaf-browser
  :defer-incrementally t
  :after eaf)

(use-package! eaf-mail
  :defer-incrementally t
  :after eaf
  :config
  (after! mu4e
    (map! :map mu4e-view-mode-map
          "o" 'eaf-open-mail-as-html)))

(use-package! eaf-pdf-viewer
  :defer-incrementally t
  :after eaf)

(use-package! eaf-org-previewer
  :defer-incrementally t
  :after eaf)

(use-package! eaf-markdown-previewer
  :defer-incrementally t
  :after eaf)
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! emacs-application-framework
  :recipe (:host github :repo "manateelazycat/emacs-application-framework" :files ("*")))
#+end_src

** Email
*** mu4e
#+begin_src emacs-lisp
(after! mu4e
  (setq! ; sendmail setup
         sendmail-program (executable-find "msmtp")
         send-mail-function #'smtpmail-send-it
         message-sendmail-f-is-evil t
         message-sendmail-extra-arguments '("--read-envelope-from")
         message-send-mail-function #'message-send-mail-with-sendmail
         ; getmail setup
         +mu4e-backend 'mbsync
         mu4e-get-mail-command "mbsync -a -c ~/.config/mbsync/config"
         ; misc
         mu4e-compose-signature-auto-include t
         mu4e-alert-style 'notifications
         mu4e-update-interval (* 5 60)
         mu4e-context-policy 'ask-if-none
         mu4e-compose-context-policy 'always-ask))
#+end_src

*** External config (defaults)
**** mbsync
#+begin_src conf :tangle ~/.config/mbsync/config
SyncState *
Create Both
Expunge Both
#+end_src

**** mstmp
#+begin_src conf :tangle ~/.config/msmtp/config
defaults
auth on
tls on
#+end_src

*** Accounts
**** mtataryn555@gmail.com
***** mu4e config
#+begin_src emacs-lisp
(after! mu4e
  (set-email-account! "p mtataryn555@gmail.com"
                      `((user-full-name     . "Mykola Tataryn")
                        (user-mail-address  . "mtataryn555@gmail.com")
                        (mu4e-sent-folder   . "/mtataryn555@gmail.com/Sent")
                        (mu4e-drafts-folder . "/mtataryn555@gmail.com/Drafts")
                        (mu4e-trash-folder  . "/mtataryn555@gmail.com/Trash")
                        (mu4e-refile-folder . "/mtataryn555@gmail.com/Archive")

                        (mu4e-maildir-shortcuts . ((:maildir "/mtataryn555@gmail.com/Inbox"   :key ?i)
                                                   (:maildir "/mtataryn555@gmail.com/Sent"    :key ?s)
                                                   (:maildir "/mtataryn555@gmail.com/Drafts"  :key ?d)
                                                   (:maildir "/mtataryn555@gmail.com/Trash"   :key ?t)
                                                   (:maildir "/mtataryn555@gmail.com/Archive" :key ?a)))

                        (mu4e-bookmarks . ((:name "[mtataryn555@gmail] Unread messages"
                                            :query "flag:unread AND NOT flag:trashed AND maildir:/mtataryn555@gmail.com/*"
                                            :key ?u)
                                           (:name "[mtataryn555@gmail] Today's messages"
                                            :query "date:today..now AND NOT flag:trashed AND maildir:/mtataryn555@gmail.com/*"
                                            :key ?t)
                                           (:name "[mtataryn555@gmail] Last 7 days"
                                            :query "date:7d..now AND NOT flag:trashed AND maildir:/mtataryn555@gmail.com/*"
                                            :key ?w :hide-unread t)
                                           (:name "[mtataryn555@gmail] Flagged messages"
                                            :query "flag:flagged AND maildir:/mtataryn555@gmail.com/*"
                                            :key ?f)
                                           (:name "Unread messages"
                                            :query "flag:unread AND NOT flag:trashed"
                                            :key ?U)
                                           (:name "Today's messages"
                                            :query "date:today..now AND NOT flag:trashed"
                                            :key ?T)
                                           (:name "Last 7 days"
                                            :query "date:7d..now AND NOT flag:trashed"
                                            :key ?W :hide-unread t)
                                           (:name "Flagged messages"
                                            :query "flag:flagged"
                                            :key ?F)))

                        (smtpmail-smtp-user       . "mtataryn555@gmail.com")
                        (+mu4e-personal-addresses . ("mtataryn555@gmail.com"))

                        (mu4e-compose-signature   . ,(concat "-----\n"
                                                             "Mykola Tataryn"))

                        (org-msg-signature        . ,(concat "-----\n"
                                                             "#+begin_signature\n"
                                                             "Mykola Tataryn\n"
                                                             "#+end_signature")))
                      t))
#+end_src

***** mbsync config
#+begin_src conf :tangle ~/.config/mbsync/config
IMAPStore mtataryn555@gmail.com-remote
Host imap.gmail.com
SSLType IMAPS
AuthMechs LOGIN
User mtataryn555@gmail.com
PassCmd "secret-tool lookup application email account mtataryn555@gmail.com"

MaildirStore mtataryn555@gmail.com-local
Path ~/.mail/mtataryn555@gmail.com/
Inbox ~/.mail/mtataryn555@gmail.com/Inbox
Trash Trash
SubFolders Verbatim

Channel mtataryn555@gmail.com-inbox
Far :mtataryn555@gmail.com-remote:
Near :mtataryn555@gmail.com-local:

Channel mtataryn555@gmail.com-sent
Far :mtataryn555@gmail.com-remote:"[Gmail]/Sent Mail"
Near :mtataryn555@gmail.com-local:Sent

Channel mtataryn555@gmail.com-drafts
Far :mtataryn555@gmail.com-remote:[Gmail]/Drafts
Near :mtataryn555@gmail.com-local:Drafts

Channel mtataryn555@gmail.com-trash
Far :mtataryn555@gmail.com-remote:[Gmail]/Trash
Near :mtataryn555@gmail.com-local:Trash

Channel mtataryn555@gmail.com-archive
Far :mtataryn555@gmail.com-remote:Archive
Near :mtataryn555@gmail.com-local:Archive

Group mtataryn555@gmail.com
Channel mtataryn555@gmail.com-inbox
Channel mtataryn555@gmail.com-sent
Channel mtataryn555@gmail.com-drafts
Channel mtataryn555@gmail.com-trash
Channel mtataryn555@gmail.com-archive
#+end_src

***** msmtp config
#+begin_src conf :tangle ~/.config/msmtp/config
account mtataryn555@gmail.com
host smtp.gmail.com
port 587
from mtataryn555@gmail.com
user mtataryn555@gmail.com
passwordeval "secret-tool lookup application email account mtataryn555@gmail.com"

account default : mtataryn555@gmail.com
#+end_src

**** mykola.tataryn@apriorit.com
***** mu4e config
#+begin_src emacs-lisp
(after! mu4e
  (set-email-account! "a mykola.tataryn@apriorit.com"
                      `((user-full-name     . "Mykola Tataryn")
                        (user-mail-address  . "mykola.tataryn@apriorit.com")
                        (mu4e-sent-folder   . "/mykola.tataryn@apriorit.com/Sent")
                        (mu4e-drafts-folder . "/mykola.tataryn@apriorit.com/Drafts")
                        (mu4e-trash-folder  . "/mykola.tataryn@apriorit.com/Trash")
                        (mu4e-refile-folder . "/mykola.tataryn@apriorit.com/Archive")

                        (mu4e-maildir-shortcuts . ((:maildir "/mykola.tataryn@apriorit.com/Inbox"   :key ?i)
                                                   (:maildir "/mykola.tataryn@apriorit.com/Sent"    :key ?s)
                                                   (:maildir "/mykola.tataryn@apriorit.com/Drafts"  :key ?d)
                                                   (:maildir "/mykola.tataryn@apriorit.com/Trash"   :key ?t)
                                                   (:maildir "/mykola.tataryn@apriorit.com/Archive" :key ?a)))

                        (mu4e-bookmarks . ((:name "[mykola.tataryn@apriorit.com] Unread messages"
                                            :query "flag:unread AND NOT flag:trashed AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?u)
                                           (:name "[mykola.tataryn@apriorit.com] Today's messages"
                                            :query "date:today..now AND NOT flag:trashed AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?t)
                                           (:name "[mykola.tataryn@apriorit.com] Last 7 days"
                                            :query "date:7d..now AND NOT flag:trashed AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?w :hide-unread t)
                                           (:name "[mykola.tataryn@apriorit.com] Flagged messages"
                                            :query "flag:flagged AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?f)
                                           (:name "[mykola.tataryn@apriorit.com] Varjo"
                                            :query "contact:varjo@apriorit.com OR subject:[varjo] AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?v)
                                           (:name "[mykola.tataryn@apriorit.com] Sotero"
                                            :query "contact:sotero@apriorit.com OR subject:[sotero] AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?s)
                                           (:name "[mykola.tataryn@apriorit.com] Jira"
                                            :query "subject:[jira] AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?j)
                                           (:name "[mykola.tataryn@apriorit.com] Confluence"
                                            :query "subject:[confluence] AND maildir:/mykola.tataryn@apriorit.com/*"
                                            :key ?c)
                                           (:name "Unread messages"
                                            :query "flag:unread AND NOT flag:trashed"
                                            :key ?U)
                                           (:name "Today's messages"
                                            :query "date:today..now AND NOT flag:trashed"
                                            :key ?T)
                                           (:name "Last 7 days"
                                            :query "date:7d..now AND NOT flag:trashed"
                                            :key ?W :hide-unread t)
                                           (:name "Flagged messages"
                                            :query "flag:flagged"
                                            :key ?F)))

                        (smtpmail-smtp-user       . "mykola.tataryn@apriorit.com")
                        (+mu4e-personal-addresses . ("mykola.tataryn@apriorit.com"))

                        (mu4e-compose-signature   . ,(concat "-----\n"
                                                             "Best regards,\n"
                                                             "Mykola Tataryn,\n"
                                                             "Software Developer of Apriorit - A Priority Choice!\n"
                                                             "Visit us at http://www.apriorit.com"))

                        (org-msg-signature        . ,(concat "-----\n"
                                                             "#+begin_signature\n"
                                                             "Best regards,\n\n"
                                                             "Mykola Tataryn,\n\n"
                                                             "Software Developer of Apriorit - A Priority Choice!\n\n"
                                                             "Visit us at [[https://apriorit.com]]\n"
                                                             "#+end_signature")))
                      t))
#+end_src

***** mbsync config
#+begin_src conf :tangle ~/.config/mbsync/config
Host long.apriorit.com
Port 40993
User mykola.tataryn@apriorit.com
AuthMechs LOGIN
PassCmd "secret-tool lookup application email account mykola.tataryn@apriorit.com"
SSLType IMAPS

MaildirStore mykola.tataryn@apriorit.com-local
Path ~/.mail/mykola.tataryn@apriorit.com/
Inbox ~/.mail/mykola.tataryn@apriorit.com/Inbox
Trash Trash
SubFolders Verbatim

Channel mykola.tataryn@apriorit.com-inbox
Far :mykola.tataryn@apriorit.com-remote:
Near :mykola.tataryn@apriorit.com-local:
Sync Pull

Channel mykola.tataryn@apriorit.com-sent
Far :mykola.tataryn@apriorit.com-remote:Sent
Near :mykola.tataryn@apriorit.com-local:Sent
Sync Pull

Channel mykola.tataryn@apriorit.com-drafts
Far :mykola.tataryn@apriorit.com-remote:Drafts
Near :mykola.tataryn@apriorit.com-local:Drafts
Sync Pull

Channel mykola.tataryn@apriorit.com-trash
Far :mykola.tataryn@apriorit.com-remote:Trash
Near :mykola.tataryn@apriorit.com-local:Trash
Sync Pull

Channel mykola.tataryn@apriorit.com-archive
Far :mykola.tataryn@apriorit.com-remote:Archive
Near :mykola.tataryn@apriorit.com-local:Archive
Sync Pull

Group mykola.tataryn@apriorit.com
Channel mykola.tataryn@apriorit.com-inbox
Channel mykola.tataryn@apriorit.com-sent
Channel mykola.tataryn@apriorit.com-drafts
Channel mykola.tataryn@apriorit.com-trash
Channel mykola.tataryn@apriorit.com-archive
#+end_src

***** msmtp config
#+begin_src conf :tangle ~/.config/msmtp/config
account mykola.tataryn@apriorit.com
host long.apriorit.com
port 40465
from mykola.tataryn@apriorit.com
user mykola.tataryn@apriorit.com
passwordeval "secret-tool lookup application email account mykola.tataryn@apriorit.com"
#+end_src

* Language configuration
** Org
#+begin_src emacs-lisp
(after! org
  (setq! org-directory "~/Org/agenda")
  (setq! org-roam-directory "~/Org/roam")
  (setq! org-agenda-files '("~/Org/agenda"))
  (setq! org-cite-global-bibliography '("~/Org/bibliography.bib"))
  (setq! org-latex-compiler '"xelatex")
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))

(use-package! org-tempo
  :after org)
#+end_src

*** Behaviour
**** Auto tangle mode
#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :hook
  (org-mode . org-auto-tangle-mode))
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! org-auto-tangle)
#+end_src

*** Exporting
Make org recognize first /five/ levels of headings as headings when exporting
#+begin_src emacs-lisp
(setq! org-export-headline-levels 5)
#+end_src

*** Latex export
**** Export settings
#+begin_src conf :tangle ~/.config/environment.d/texmf.conf
TEXMFHOME=${HOME}/.local/share/texmf
#+end_src

#+begin_src emacs-lisp
(after! org
  (setq! org-latex-classes
         '(("beamer" "\\documentclass[presentation]{beamer}"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
           ("article" "\\documentclass[11pt]{article}"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
            ("\\paragraph{%s}" . "\\paragraph*{%s}")
            ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
           ("report" "\\documentclass[11pt]{report}"
            ("\\part{%s}" . "\\part*{%s}")
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
           ("book" "\\documentclass[11pt]{book}"
            ("\\part{%s}" . "\\part*{%s}")
            ("\\chapter{%s}" . "\\chapter*{%s}")
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
           ("dstu-report" "\\documentclass{satan/dstu-report}"
            ("\\section{%s}" . "\\section*{%s}")
            ("\\subsection{%s}" . "\\subsection*{%s}")
            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
            ("\\paragraph{%s}" . "\\paragraph*{%s}")
            ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))))
#+end_src

**** TODO Default style

**** TODO DSTU 3008-2015 Style
#+begin_src latex :tangle ~/.local/share/texmf/tex/xelatex/satan/dstu-report.cls
\NeedsTeXFormat{LaTeX2e}
\ProvidesClass{satan/dstu-article}

\LoadClass[14pt,a4paper]{article}

% indentfirst paragraph (it needs to be loaded before polyglossia)
\RequirePackage{indentfirst}

% polyglossia setup
\RequirePackage{fontspec}
\RequirePackage{polyglossia}
\setdefaultlanguage{ukrainian}
\setotherlanguage{english}

% fontspec setup
\setmainfont{Times New Roman}
\setsansfont{Noto Sans}
\setmonofont{Noto Sans Mono}

% page layout
\RequirePackage[paper=a4paper,top=2cm,bottom=2cm,left=2.5cm,right=1cm]{geometry}

% paragraphs and linespread
\setlength{\parindent}{5ex}
\setlength{\parskip}{0pt}
\linespread{1.3}
#+end_src

*** HTML export
**** Mathjax
#+begin_src emacs-lisp
(after! org
  (setq! org-html-mathjax-options
         '((path "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js" )
           (scale "1")
           (autonumber "ams")
           (multlinewidth "85%")
           (tagindent ".8em")
           (tagside "right"))))
#+end_src

*** Reveal export
#+begin_src emacs-lisp
(after! org
  (setq! org-re-reveal-theme "night"
         org-re-reveal-transition "slide"
         org-re-reveal-plugins '(markdown notes math search zoom)
         org-re-reveal-width (display-pixel-width)
         org-re-reveal-height (display-pixel-height)))
#+end_src

** NASM
#+begin_src emacs-lisp :tangle packages.el
(package! nasm-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! nasm-mode
  :mode "\\.asm\\'")
#+end_src

** Systemd
For editing systemd unit files
#+begin_src emacs-lisp :tangle packages.el
(package! systemd :pin "b6ae63a236605b1c5e1069f7d3afe06ae32a7bae")
#+end_src

#+begin_src emacs-lisp
(use-package! systemd
  :defer t)
#+end_src
